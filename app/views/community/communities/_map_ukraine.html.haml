:css
  #custom_map {
    border: none;
    margin: 0px;
    box-shadow: none;
    background: transparent;
    min-height: 400px;
    height: 100%;
  }

  #custom_map path {
    fill-opacity: 0.3;
  }

  #custom_map path:hover {
    fill-opacity: 0.5;
  }

  #custom_map .leaflet-control-zoom.leaflet-bar.leaflet-control, .leaflet-control-attribution.leaflet-control {
    display: block;
  }

.col-sm-12{:style => 'margin-top: 10px;'}
  = render partial: 'sequence'

.map_container#custom_map.col-sm-12
  = render partial: 'map'

:javascript

  $(document).ready(function() {

    var embed_code = aEmbedCode();
    var src = 'https://' + window.location.host + "/community/map";
    embed_code.initialize({width: '100%', height: '800px', el_id: "#embed_code_timeline", src: src});

    var data_areas, data_towns;
    var repairMapOptions = {
      scrollWheelZoom: true,
      minZoom: 6,
      maxZoom: 13,
      dragging: true,
      map_static: false,
      center: [48.5, 31.2],
      bounds: [ [45, 21.44531], [52.32182, 41.52832]]
    };
    var pointOptions = {
      clustered: false,
      style: {
        opacity: 0.8
      },
      hoverStyle: {
        opacity: 1
      },
      featureClickCallback: onFeatureClick,
      getInfoContent: getTownsContent,
      getPoint: getPoint,
      selectPath: false,
      scale: "Ukraine"
    };
    var areasOptions = {
      zIndex: 1,
      featureClickCallback: onFeatureClick,
      getInfoContent: getAreasContent,
      selectPath: false,
      scale: "Ukraine"
    };

    var aRepairMap = RepairMap(repairMapOptions);

    var sequence = aSequence('#sequence');
    sequence.initializeBreadcrumbTrail({clickCallback: sequenceClick});

    var feature = JSON.parse('#{@feature.to_json}');

    if(feature.properties) {
      create_community_map(feature);
      sequence.show(feature.properties.title);
    } else {
      create_Ukraine_map();
      sequence.show("Ukraine");
    }

    var Icon = L.Icon.extend({ options: { iconSize: [28, 37] }});

    function getPoint(properties) {
      var point = {}
      point.icon = new Icon({iconSize: [15, 20], iconUrl: '/assets/community/community_center_small.png'});
      /*if(aRepairMap.map.getZoom() <= 7) {
        point.icon = new Icon({iconSize: [15, 20], iconUrl: '/assets/community/community_center_small.png'});
      } else {
        point.icon = new Icon({iconSize: [28, 37], iconUrl: '/assets/community/community_center.png'});
      }*/
      return point;
    }

    function onFeatureClick(feature) {
      create_community_map(feature);
    }

    function onCommunityClick(feature) {
      if(feature.properties.link) {
        window.open(feature.properties.link,'_blank');
      }
    }

    function getAreasContent(properties) {
      var content = "", title = "";
      if(properties != "Ukraine") {
        content += '<h3>' + properties.title + '</h3>' +
                   '<p>Територіальних громад: ' + properties.communities_count + '</p>';
      }
      return content;
    }

    function getTownsContent(properties) {
      var content = "", title = "";
      if(properties != "Ukraine") {
        content += '<h3>' + properties.title + '</h3>';
      }
      return content;
    }

    function getCommunityContent(properties) {
      var content = "", title = "";
      if(properties != "Ukraine") {
        content += '<h3>' + properties.title + '</h3>';
        if(properties.participants) {
          content += '<p><b>Склад громади: </b></p><ul>';
          $.each(properties.participants.split(','), function(p, i){
            content += '<li>' + i + '</li>';
          })
          content += '</ul>';
        }
      }
      return content;
    }

    function sequenceClick(){
      window.history.pushState("", "", '/community/communities');
      $("#custom_map").html('#{ j render :partial => 'map'}');
      $('#embed_code_timeline').css("display","none");
      $('#edit_btn').css("display","none");
      $('#upload_btn').css("display","inline-block");
      sequence.show("Ukraine");
      repairMapOptions.center = [48.5, 31.2];
      repairMapOptions.bounds = [ [45, 21.44531], [52.32182, 41.52832]];
      aRepairMap = RepairMap(repairMapOptions);
      areasOptions.featureClickCallback = onFeatureClick;
      areasOptions.getInfoContent = getAreasContent;
      areasOptions.scale = "Ukraine";
      pointOptions.scale = "Ukraine";
      if(data_towns && data_areas) {
        aRepairMap.addGeoJsonSvg(data_areas, areasOptions);
        aRepairMap.addGeoJsonPoints(data_towns, pointOptions);
      } else {
        create_Ukraine_map()
      }
    }

    function create_Ukraine_map() {
      // add Areas
      $.ajax({
        method: 'get',
        url: '#{community_geo_json_path}&type=areas',
        dataType: 'json',
      })
      .done(function (data) {
        data_areas = data;
        aRepairMap.addGeoJsonSvg(data, areasOptions);
      })
      .fail(function () {
      });

      // add markers
      $.ajax({
        method: 'get',
        url: '#{community_geo_json_path}',
        dataType: 'json',
      })
      .done(function (data) {
        data_towns = data;
        aRepairMap.addGeoJsonPoints(data, pointOptions);
      })
      .fail(function () {
      });
    }

    function create_community_map(feature){
      $.ajax({
        method: 'get',
        url: '#{community_geo_json_path}&area_title=' + feature.properties.title,
        dataType: 'json',
      })
      .done(function (data) {
        if(data['areas']['features'].length > 0) {
          window.history.pushState("", "", '/community/communities/' + feature.properties.id + '?locale=' + "#{params[:locale]}");
          sequence.show(feature.properties.title);
          $("#custom_map").html('');
          $("#custom_map").html('#{ j render :partial => 'map'}');
          repairMapOptions.center = feature.properties.center;
          repairMapOptions.bounds = feature.properties.bounds;
          aRepairMap = RepairMap(repairMapOptions);
          areasOptions.featureClickCallback = onCommunityClick;
          areasOptions.getInfoContent = getCommunityContent;
          areasOptions.scale = "community";
          pointOptions.scale = "community";
          aRepairMap.addGeoJsonSvg(data['areas'], areasOptions);
          aRepairMap.addGeoJsonPoints(data['centers'], pointOptions);
          $('#edit_btn').attr("href", "/community/edit/" + feature.properties.id + '?locale=' + '#{params[:locale]}').css("display","inline-block");
          $('#upload_btn').css("display","none");
          var src = "https://" + window.location.host + "/community/map/" + feature.properties.id;
          $('#embed_code_timeline').css("display","block");
          embed_code.set_iframe(src);
        }
      })
      .fail(function (e) {
      });
    }

  });
