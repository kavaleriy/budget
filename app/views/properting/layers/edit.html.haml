- model_class = Properting::Layer

:scss
  .edit-layer{
    #edit_layer{
      margin-bottom: 0;
    }
    .search_map{
      form{
        margin: 0;
        .form-inline{
          .form-group{
            padding: 0;
            input{
              width: 100%;
            }
          }
        }
      }
    }
    .map_container {
      height: 750px;
      padding: 0;
    }
    #property{
      form{
        margin: 0;
        .form-control {
          width: 100%;
        }
      }
    }
    .edit-btns{
      padding-bottom: 15px;
    }
  }
  @media (min-width: 768px){
    .edit-layer{
      .search_map{
        form{
          .form-inline{
            .form-group{
              padding-right: 15px;
              &:nth-last-child(1){
                padding-right: 0;
              }
            }
          }
        }
      }
    }
  }

= content_for :header do
  .head
    %i.fa.fa-map
    = @properting_layer.town.title if @properting_layer.town
    = ", " + @properting_layer.title unless @properting_layer.title.blank?

.row.edit-layer
  .col-xs-12
    = render 'edit_form'

  .col-xs-12.col-md-8
    .panel.panel-default
      .panel-heading
        = render partial: 'search_properties_coordinates', locals: { layer: @properting_layer }
      .panel-body
        .map_container.col-xs-12
          = render partial: 'properting/maps/map'

  .col-xs-12.col-md-4
    .panel.panel-default
      .panel-heading
        = t('repairing.layers.edit.repair')
      .panel-body
        #property
        #remove_property

  .clear

  .col-xs-12.edit-btns
    %button#calc_roads.btn.btn-info{ disabled: 'disabled' }
      = t('.calculate_coordinates')

    = link_to t('form.show'), @properting_layer, class: 'btn btn-primary'

    = link_to t('form.back'), properting_layers_path, class: 'btn btn-default'

    = link_to t('repairing.repairs.all_repairs'),
              edit_properting_layer_path(layer_id: @layer.id),
              remote: true,
              class: 'btn btn-success'

#properties
  - if @properties
    = render partial: 'properties'

:javascript

  $(document).ready(function() {

    var aPropertyMap = PropertyMap({
      zoom: 6,
      minZoom: 5,
      maxZoom: 18,
      center: [48.5, 31.2],
      bounds: [ [47.54677, 21.44531], [52.32182, 41.52832]],
      getMapPopupContent: getMapPopupContent,
      scrollWheelZoom: true
    });
    var categories_icons = #{Properting::Category.get_category_icons}

    // add markers
    $.ajax({
      method: 'get',
      url: '#{geo_json_properting_layer_path}',
      dataType: 'json',
    })
    .done(function (data) {

      aPropertyMap.addGeoJsonPoints(data, getPoint, {
        clustered: true,
        style: {
          opacity: 0.5,
        },
        hoverStyle: {
          opacity: 1,
        },
        featureClickCallback: onFeatureClick,
        dragCallback: onDrag,
        editInfoContent: true
      })

      // initRoads(data)

      // function initRoads(data) {
      //   var roads = get_roads_arr()
      //
      //   if (roads.length > 0) {
      //     $('button#calc_roads')
      //       .removeAttr("disabled")
      //       .click(function() {
      //         reCalculateRoutes()
      //       })
      //   }
      //
      //   function get_roads_arr() {
      //     var features = []
      //
      //     get_roads(data['features'])
      //
      //     function get_roads(item) {
      //       if (item == null) return;
      //
      //       $.each(item, function(i, d){
      //         if (d.properties.repair == "road")
      //           features.push(d)
      //
      //         get_roads(d['features'])
      //       })
      //     }
      //
      //     return features;
      //   }
      //
      //   function reCalculateRoutes() {
      //     if (roads.length == 0) return;
      //
      //     calc_routes()
      //
      //     function calc_routes() {
      //       var road = roads.pop()
      //       if (road == null) return;
      //
      //       calc_road_route(road)
      //
      //       function calc_road_route(road) {
      //         var coordinates = road.properties.route
      //
      //         var waypoints = []
      //         waypoints.push({ latLng: L.latLng(coordinates[0]) });
      //         waypoints.push({ latLng: L.latLng(coordinates[coordinates.length - 1]) });
      //
      //         L.Routing.control({
      //           waypoints: waypoints,
      //           routeWhileDragging: false
      //         }).on('routesfound', function(router) {
      //           updateRoute(router.routes[0].coordinates, road)
      //         });
      //       }
      //
      //       calc_routes()
      //     }
      //   }
      // }

    })
    .fail(function () {
    });

    var Icon = L.Icon.extend({ options: { iconSize: [28, 28] }});
    // REPEAT !!!!!!!!!!!!
    // Same code in Property/maps/_iframe.html.haml
    function getIconByCategory(parent_cat, child_cat){
      var iconCategoryUrl = '/assets/properting/default_icon.png';

      if (categories_icons[child_cat]){
        iconCategoryUrl = categories_icons[child_cat];
      }
      else if (categories_icons[parent_cat]){
        iconCategoryUrl = categories_icons[parent_cat];
      }

      return new Icon({iconUrl: iconCategoryUrl});
    };
    function getPoint(properties) {
      var point = {}
      point.icon = getIconByCategory(properties.p_c_id, properties.c_id);

      return point;
    }

    function onMapClick(feature, popup) {
    }

    function getMapPopupContent(e) {
      var place_for_close_btn = '<span style="color:white">----</span>'
      var content = e.latlng.toString() + place_for_close_btn;
      return content
    }

    var _removedFeature
    var _selectedFeature

    function onFeatureClick(feature, layer) {
      selectFeature(feature, layer)

      featureId = feature.properties.id
      $.ajax({
        url: '/properting/map/getInfoContentForPopup/' + featureId + "?locale=" + "#{params[:locale]}",
        success:function(data){
          layer.bindPopup(data).openPopup();
        }
      })

    }

    function getPropertyId(){
      return $('.new_info_panel').attr('data-property-id');
    }

    function get_property_info_modal(){
      var property_id = getPropertyId();
      $.ajax({
        url: "#{properting_show_property_info_path}",
        dataType: 'script',
        data: { id: property_id },
        success: function(data){
        }
      })
    }

    $('body').on('click','.more-text',function(){
      get_property_info_modal();
    });

    function onDrag(layer, ll) {
      $.ajax({
        method: 'PUT',
        url: '#{properting_layer_property_path(@properting_layer.id, "%id%")}'.replace("%id%", layer.feature.properties.id),
        dataType: 'json',
        cache: false,
        data: {
          properting_property: {
            coordinates: [ll.lat, ll.lng]
          }
        }
      })
      .fail(function () {
        alert('Не вдалось зберегти дані')
      })
    }

    $('.search_map form').bind("ajax:success", function(f, data){
      if (data.features) {
        selectFeature(data.features[0]);
      } else {
        aPropertyMap.addGeoJsonPoint([data['properties']['id'], 0, data], getPoint, {
          clustered: true,
          style: {
            opacity: 0.8,
          },
          hoverStyle: {
            opacity: 1,
          },
          featureClickCallback: onFeatureClick,
          dragCallback: onDrag,
          editInfoContent: true
        });
        selectFeature(data);
      }
    });

    function selectFeature(feature, target) {
      $('#property').html('');

      _selectedFeature = feature

      if (_selectedFeature) {
        $.ajax({
          method: 'GET',
          cache: false,
          url: '#{edit_properting_layer_property_path(@properting_layer.id, "%id%")}'.replace("%id%", _selectedFeature.properties.id),
          success: function(){
            $('#remove_property').on('click',function(){
                aPropertyMap.removeMarker(_selectedFeature);
            });
          }
        })
        .fail(function () {
          console.log('click fail')
        })

        if (_selectedFeature.properties.repair == "road") {

          editRoute()
        } else {
          aRepairMap.editRoute([])
        }
      }
    }

    function editRoute(feature) {

      if (feature == null)
        feature = _selectedFeature

      var coordinates  = feature.properties.route

      var waypoints = []
      // if we need all waypoints on the road
      $.each(coordinates,function(coordKey, coordVal){
        waypoints.push({ latLng: L.latLng(coordVal) });
      })
      // if we need only first and last point on the road
      // waypoints.push({ latLng: L.latLng(coordinates[0]) });
      // waypoints.push({ latLng: L.latLng(coordinates[coordinates.length - 1]) });

      aPropertyMap.editRoute(waypoints, routeFoundCallback)

      function routeFoundCallback(route) {
        updateRoute(route, feature)
      }
    }

    function updateRoute(route, feature){
      update_feature_coords()
      store_route()

      function update_feature_coords() {
        feature.properties.route = []
        $.each(route, function(key,val) {

          feature.properties.route.push([val['lat'], val['lng']])
        })
      }

      function store_route() {
        var coordinates = ''
        $.each(route, function(key,val) {
          coordinates += val + ' '
        })
        $.ajax({
          method: 'PUT',
          url: '#{properting_layer_property_path(@properting_layer.id, "%id%")}'.replace("%id%", feature.properties.id),
          dataType: 'json',
          data: {
            properting_property: {
              coordinates: coordinates
            }
          }
        })
        .fail(function () {
          alert('Не вдалось зберегти дані')
        })
      }
    }

  });
