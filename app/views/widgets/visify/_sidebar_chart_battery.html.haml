:css
  .axis text {
    font-size: 1.0em;
    font-weight: bold;
  }
  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }
  .bar {
    fill-opacity: .7;
  }

#sidebar_chart

:javascript

  function aSidebarChartBattery(aContainer) {
    var margin = {top: 20, right: 100, bottom: 30, left: 110},
        width, height;
    var x, y, xAxis, yAxis;
    var svg, _self;

    function hide() {
      $("#sidebar_chart").height(0);
      svg.selectAll("*").remove()
    }

    function sort(data) {
      var x0 = y.domain(data.sort(true
              ? function(a, b) {
                  if(!a.amount_fact) a.amount_fact = 0;
                  if(!b.amount_fact) b.amount_fact = 0;
                  return (b.amount > b.amount_fact ? b.amount : b.amount_fact) - (a.amount > a.amount_fact ? a.amount : a.amount_fact);
                }
              : function(a, b) { return d3.ascending(a.label, b.label); })
              .map(function(d) { return d.key; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };
      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });
      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    function mouseover(d) {
      var s = Snap.select('#sidebar_chart svg');
      s.append(this); // to move current path to the front
      var pathEl = Snap.select('#' + $(this).attr('id'));
      $(this).css("stroke", "#666");
      pathEl.stop().animate( { 'stroke-width': 5, 'stroke-opacity': .5 }, 2000, mina.elastic);
      _self.hoverCallback(d);
    }

    function mouseout(d) {
      var pathEl = Snap.select('#' + $(this).attr('id'));
      if(pathEl) {
        pathEl.stop().animate( { 'stroke-width': 0 }, 2000, mina.elastic);
        $(this).css("stroke", "none");
        _self.hoverCallback(d.parent);
      }
    }

    return {
      initialize: function(options) {
        _self = this;
        _self.clickCallback = options.clickCallback;
        _self.hoverCallback = options.hoverCallback;
        $("#sidebar_chart").html('');
        width = $("#chart").width() - margin.left - margin.right,
        x = d3.scale.pow().exponent(.2)   // reduce exponent() argument to make less curve
          .range([0, width]);
        y = d3.scale.ordinal();
        xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .tickFormat(function(d){
              return aVisify.helpers.formatNumber(d)
            });

        yAxis = d3.svg.axis()
            .scale(y)
            .orient("right");

        svg = d3.select("#sidebar_chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", '100%');
      },
      hide: hide,
      show: function(data) {
        hide();
        if (!data == null || data.length < 1) return;

        var svg_height = data.length * 60 + 8;
        $("#sidebar_chart").height('100%');
        svg.attr("height", svg_height + margin.top + margin.bottom);
        var fact = false;

        x.domain([0, d3.max(data, function(d) { if(d.amount_fact) fact = true; return d.amount > (d.amount_fact || 0) ? d.amount : (d.amount_fact || 0) })]);
        y.rangeRoundBands([0, svg_height], .1)
         .domain(data.map(function(d) { return d.key; }));

        sort(data);

        var bars = svg.selectAll(".bar")
          .data(data);

        var width_s = 9, space_s = 4;
        var file_type = "#{@file_type}";

        // fact rectangle
        bars.enter().append("rect")
          .attr("x", margin.left + 1)
          .attr("y", function(d) { return y(d.key) + margin.top - 14; })
          .attr("rx", "4px")
          .attr("ry", "4px")
          .attr("width", function(d) {
                             if(d.amount > d.amount_fact) {
                                return (Math.ceil(x(d.amount)/(width_s + space_s))*(width_s + space_s) + 6)*(d.amount_fact/d.amount)
                             }
                             return x(d.amount_fact || 0);
                         } )
          .attr("height", y.rangeBand()/2 )
          .style("fill", file_type == "TaxonomyRov" ? "red" : "green")
          .style("stroke", "#666");

        // plan rectangle
        bars.enter().append("rect")
          .attr("x", margin.left + 1)
          .attr("y", function(d) { return y(d.key) + margin.top - 14; })
          .attr("rx", "4px")
          .attr("ry", "4px")
          .attr("width", function(d) {
                             create_fact_rects(d);
                             if(d.amount < d.amount_fact) {
                                var plan_width = x(d.amount_fact || 0)*(d.amount/d.amount_fact);
                                return Math.floor(plan_width/(width_s + space_s))*(width_s + space_s) + 6;
                             }
                             return Math.ceil(x(d.amount)/(width_s + space_s))*(width_s + space_s) + 6;
                         } )
          .attr("height", y.rangeBand()/2 )
          .style("fill", "white")
          .style("stroke", "#666");

        // fact rectangles
        function create_fact_rects(node) {

          var plan_width, fact_width, plan_num;

          if(node.amount >= node.amount_fact) {
            plan_width = Math.ceil(x(node.amount)/(width_s + space_s))*(width_s + space_s) + 6;
            plan_num = (plan_width-6)/(width_s + space_s);
            if(aTreeChart.data_type == "fact") {
              fact_width = plan_width;
            } else {
              fact_width = plan_width*(node.amount_fact/node.amount);
            }
          } else {
            fact_width = x(node.amount_fact || 0);
            plan_width = fact_width*(node.amount/node.amount_fact);
            plan_width = Math.floor(plan_width/(width_s + space_s))*(width_s + space_s) + 6;
            plan_num = Math.floor(plan_width/(width_s + space_s));
          }

          var plan_data = d3.range(plan_num),
              fact_num, fact_data;

          if(node.amount <= node.amount_fact) {
            fact_num = plan_num;
            fact_data = plan_data;
          } else {
            fact_num = fact_width/(width_s + space_s);
            fact_data = d3.range(fact_num);
          }

          var g = svg.append("g")
                     .attr('transform', 'translate(' + (margin.left - 20) + ',' + (y(node.key) + margin.top - 14) + ')'),
              rects = g.selectAll("rect").data(plan_data).enter().append("rect");

          var colors=d3.scale.linear()
            .domain([0,(d3.max(plan_data) - d3.min(plan_data))/2, d3.max(plan_data)]);

          if(file_type == "TaxonomyRov") {
            colors.range(["green","yellow","red"]);
          } else {
            colors.range(["red","yellow","green"]);
          }

          rects.attr({
            x: function(d,i){
                 return i*(width_s + space_s) + 2*(width_s + space_s);
               },
            y: 3,
            rx: "2px",
            ry: "2px",
            height: 21,
            width: function(d,i) {
                      return width_s;
                   },
            fill: function (d,i){
                      if((fact_num < plan_num && i > fact_num) || (!fact && aTreeChart.data_type == "plan")) {
                        return "#E6E6E6";
                      }
                      return colors(d);
                  }
          });
        }

        // hover rectangle to perform animation
        bars.enter().append("rect")
            .attr("x", margin.left)
            .attr("y", function(d) { return y(d.key) + margin.top - 14; })
            .attr("rx", "4px")
            .attr("ry", "4px")
            .attr("data-y", function(d) { return y(d.key) - 14; })
            .attr("width", function(d) {
                             if(d.amount >= (d.amount_fact || 0)) { // correct rectangle width to contain all battery
                               return Math.ceil(x(d.amount)/(width_s + space_s))*(width_s + space_s) + 6;
                             }
                             return x(d.amount_fact || 0);
                           })
            .attr("height", y.rangeBand()/2 )
            .attr("id", function(d) { return "bar_" + d.id; })
            .style("fill-opacity", 0)
            .style("cursor", function(d) { return (d.children && d.children.length == 0) ? "default" : "pointer" })
            .on("mouseover", mouseover)
            .on("mouseout", mouseout)
            .on("click", function(d) {
                  _self.clickCallback(d);
                });

        var bar_text = svg.append("g")
          .attr("class", "y axis")
          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
          .call(yAxis);

        // x-axis text
        bar_text.selectAll("text")
          .text(function(d, i) {return data[i].label; });

        // left side axis text
        bar_text.selectAll("g")
                .append("text")
                .html(function(d, i) {
                  if (aTreeChart.data_type == "fact") return I18n.t('js.visify.fact') + ": " + aVisify.helpers.formatNumber(data[i].amount || 0);
                  return I18n.t('js.visify.plan') + ": " + aVisify.helpers.formatNumber(data[i].amount || 0);
                })
                .attr("x",-margin.left)
                .attr("y",-30)
                .style("fill", "#666")
                .style("font-size", "0.9em");

        if(fact) {
          // left side fact amount text
          bar_text.selectAll("g")
          .append("text")
          .html(function(d, i) {
            return I18n.t('js.visify.fact') + ": " + aVisify.helpers.formatNumber(data[i].amount_fact || 0);
          })
          .attr("x",-margin.left)
          .attr("dy",-15)
          .style("font-size", "0.9em")
          .style("fill", "#666");

          // right side percent text
          bar_text.selectAll("g")
          .append("text")
          .style('font-family', 'FontAwesome')
          .text(function(d, i) {
              if(data[i].amount_fact > data[i].amount) {
                return "\uf071 " + Math.ceil(data[i].amount_fact*100/data[i].amount) + "%";
              }
              return Math.round(data[i].amount_fact*100/data[i].amount) + "%";
          })
          .attr("x",function(d, i){
                      if(data[i].amount >= (data[i].amount_fact || 0)) { // correct rectangle width to contain all battery
                         return Math.ceil(x(data[i].amount)/(width_s + space_s))*(width_s + space_s) + 16;
                       }
                       return x(data[i].amount_fact || 0) + 10;
                    })
          .attr("dy",-22)
          .style("font-size", "1.1em")
          .style("fill", function(d, i) {
              if(data[i].amount_fact > data[i].amount) {
                return "#FF8000";
              }
              return "#666";
          });
        }
      },
    }
  }