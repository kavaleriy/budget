-# ADD YEAR

:scss
  .vis_controls div {
    padding-right: 10px;
  }
  /*hide sidebar for share*/
  .addthis-smartlayers-desktop {
    display: none;
  }

  .partners {
    margin-bottom: 10px;
  }
  // custom styles for spinner
  .vis-spinner{
    #spinner-container{
      background: none;
      .spinner{
        .sk-circle:before{
          background-color: rgb(0, 170, 0);
        }
      }
    }
  }

.visify
  .col-xs-12
    = render partial: 'sequence', :locals => { budget_file_id: budget_file_id }

  .chart.col-xs-12.col-md-8
    %ul.nav.nav-tabs{role: 'tablist'}
      %li.active{'role' => 'presentation'}
        %a{href: '#tab_bubbletree', 'aria-controls' => 'tab_bubbletree', role: 'tab', 'data-toggle' => 'tab'}
          %i.fa.fa-spinner.fa-2x
      %li{'role' => 'presentation'}
        %a{href: '#tab_chart', 'aria-controls' => 'tab_chart', role: 'tab', 'data-toggle' => 'tab'}
          %i.fa.fa-bar-chart-o.fa-2x
      %li{'role' => 'presentation'}
        %a{href: '#tab_pie', 'aria-controls' => 'tab_pie', role: 'tab', 'data-toggle' => 'tab'}
          %i.fa.fa-pie-chart.fa-2x
      %li{'role' => 'presentation'}
        %a{href: '#tab_table', 'aria-controls' => 'tab_table', role: 'tab', 'data-toggle' => 'tab'}
          %i.fa.fa-table.fa-2x
      .vis_controls
        - if @taxonomy._type == "TaxonomyRov"
          .pull-right
            = render partial: 'select_level'
        - if @types_count > 1
          =render partial: 'plan_fact_switch',locals: {type: 'plan'}

        .pull-right
          = render partial: 'select_amount'

    .tab-content
      .tab-pane.fade.in.active{'role' => 'tabpanel', 'id' => 'tab_bubbletree'}
        .vis-spinner
          = render partial: 'layouts/spinner'
        #chart
        %canvas{:style => "display: none;"}
        .pull-right
          = render partial: 'layouts/export_img', :locals => { container: '#chart' }
      .tab-pane.fade.in{'role' => 'tabpanel', 'id' => 'tab_chart'}
        = render partial: 'widgets/visify/sidebar_chart_battery', :locals => { budget_file_id: @taxonomy.id }
      .tab-pane.fade.in{'role' => 'tabpanel', 'id' => 'tab_pie'}
        = render partial: 'widgets/visify/sidebar_pie', :locals => { budget_file_id: @taxonomy.id }
      .tab-pane.fade.in{'role' => 'tabpanel', 'id' => 'tab_table'}
        = render partial: 'widgets/visify/sidebar_table', :locals => { budget_file_id: @taxonomy.id }

  .col-xs-12.col-md-4.sidebar_modify
    = render partial: 'under_sequence', :locals => { fond_codes: @fond_codes }
    = render partial: 'slider_chart'
    = render partial: 'slider_compare', :locals => { budget_file_id: @taxonomy.id }
    = render partial: 'sidebar_modify', :locals => { file: @taxonomy }

  - if @taxonomy.description
    %h4.col-xs-12
      = t('description') + ": #{@taxonomy.description}"

  .col-xs-12
    %p
      = t('author') + ": #{@author}"
  -#TODO: Make helper, add class to block
  .col-xs-12
    %p
      - updated_time = @taxonomy.updated_at.nil? ? '-' : (@taxonomy.updated_at).strftime("%d.%m.%Y") + t('lower_year')
      = t('last_update') + updated_time
  .col-xs-12
    .pull-left
      =render partial: 'layouts/addthis_hor_share'
    .partners.pull-right
      =render partial: 'layouts/partners'

  = render partial: 'helpers'

:javascript

  var aTreeChart = {}

  $(document).ready(function() {

    $('a[role="tab"]').on('shown.bs.tab', function (e) {
      if($(this).attr('href') == "#tab_pie") {
        sidebar.redraw();
      }
    });

    var year = "#{@sel_year}",
        month = "#{@sel_month}",
        quarter = 0,
        sequence = aSequence('.visify'),
        under_sequence = aUnderSequence('.visify'),
        chart = aTreeChart('.bubbletree'),
        slider = aSliderCompare('.sidebar_modify #slider_compare'),
        slider_chart = aSliderChart('.sidebar_modify #slider_chart', slider),
        sidebar = aSidebar('.visify'),
        init_levels = JSON.parse('#{@levels.to_json}'),
        draggable = 1,
        file_type = '#{@file_type}',
        centerNode = null,
        last_node = null,
        current_data,
        _data,
        width;

    // export methods
    aTreeChart.get_data = get_data
    aTreeChart.refresh = refresh
    aTreeChart.divider = { amount: 1, recalc_per: false}

    aTreeChart.setCumulative = function(is_cumulative) {
      aTreeChart.is_cumulative = is_cumulative == true
      refresh()
    }
    aTreeChart.is_cumulative = false

    aTreeChart.data_type = "#{@data_type}"


    if(file_type == "TaxonomyRot") {
      draggable = 0;
    }

    get_data(init_levels);

    function get_data(levels) {
      $("#spinner-container").show();

      // TODO: PASS SELECTED YEAR
      d3.json("/widgets/visify/get_bubbletree_data/#{@budget_file.id}/" + levels + '?locale=' + I18n.locale, function(data) {
        _data = data;

        if (data.amount[aTreeChart.data_type] == undefined) {
          if (data.amount.fact) aTreeChart.data_type = 'fact'
          if (data.amount.plan) aTreeChart.data_type = 'plan'
        }
        iframe_resize();
      })
    }

    function refresh() {
      update_data()
    }

    // radio buttons to switch plan/fact
    $('.data_type').on("click", function(){
      aTreeChart.data_type = $(this).children(':first').val();
      iframe_resize();
    });

    $(window).resize(function() {
      // create chart according to the window size
      iframe_resize();
    });

    // Responsive SVG charts
    function iframe_resize() {
      // set width and height
      document_width = $(document).width();
      sidebar_width = $('.visify .sidebar').width();
      if(document_width > 2*sidebar_width) {
        width = document_width - sidebar_width - document_width*0.02;
      } else {
        width = document_width;
      }
      height = $(document).height() * .7;
      $("#tab_chart").height('auto');
      $("#tab_pie").height(height);
      $("#tab_table").height(height);

      // initialize blocks of visualization
      sequence.initializeBreadcrumbTrail({clickCallback: ItemClick, dropCallback: ItemDrop, levels: init_levels, draggable: draggable});
      slider.initialize(100, {clickCallback: sliderItemClick});
      slider_chart.initialize(40, {clickCallback: yearItemClick});
      sidebar.initialize(height, {clickCallback: ItemClick, hoverCallback: hoverCallback});
      $("#chart").html('');
      chart.initialize({ width: width, height: height, clickCallback: bubbleItemClick, hoverCallback: hoverCallback });

      // build data
      current_data = buildData(_data);
      preprocessData(current_data, 9);
      centerNode = current_data;

      show_data(current_data, year)
    }

    function show_data(current_data, year) {
      $("#spinner-container").hide();
      chart.set_centerNode(null);
      chart.show(current_data);
      sequence.show(current_data);
      under_sequence.show(current_data);
      slider_chart.show(current_data, year);

      slider.show(current_data, year);
      sidebar.show(current_data);
    }

    // ---------------------------------- FUNCTIONS ------------------------------------

    function bubbleItemClick(node) {
      sequence.show(node);
      under_sequence.show(node);
      slider_chart.show(node, year);
      if(slider.current_node() != centerNode || slider.current_year() != year) {
        slider.show(node, year);
      }
      sidebar.show(node);
      chart.set_centerNode(node);
      centerNode = node;
    }

    function yearItemClick(new_year) {
      if(slider_chart.current_month != 0 && year == new_year) {
        month = 0;
        slider.set_month(month);
        $(".bar.month").css("fill-opacity", "0.5").css("fill", "#A4A4A4");
      }
      if(slider_chart.current_quarter != 0 && year == new_year) {
        quarter = 0;
        slider.set_quarter(quarter);
        //$(".bar.quarter").css("fill-opacity", "0.5").css("fill", "#9ecae1");
      }
      year = new_year;
      monthItemClick(month);
    }

    function sliderItemClick(element, curr_slider) {
      if(curr_slider == "month") {
        monthItemClick(element);
      } else if(curr_slider == "quarter") {
        quarterItemClick(element);
      }
    }

    function monthItemClick(new_month) {
      if (month == new_month && slider.current_year() == year ) {
        month = 0;
      } else {
        month = new_month;
        if(slider.current_year() == year) {
          quarter = 0;
        }
      }

      update_data()
    }

    function quarterItemClick(new_quarter) {
      if(quarter == new_quarter && slider.current_year() == year) {
        quarter = 0;
      } else {
        quarter = new_quarter;
        if(slider.current_year() == year) {
          month = 0;
        }
      }

      update_data()
    }

    function update_data() {
      current_data = buildData(_data)
      preprocessData(current_data, 9);

      var curr_node;
      if (chart.getCenterNode) {
        curr_node = chart.getCenterNode(current_data);
        slider.set_centerNode(centerNode);
      } else if(centerNode != current_data && !chart.getCenterNode) {
        curr_node = chart.get_CenterNode(centerNode);
        slider.set_centerNode(curr_node);
      }

      show_data(current_data, year)
    }

    function ItemClick(node) {
      sidebar.show(node);
      sequence.show(node);
      under_sequence.show(node);
      slider_chart.show(node, year);
      slider.show(node, year);
      chart.set_centerNode(node);
      chart.selectNode(node);
    }

    function ItemDrop(levels, node) {
      last_node = node;
      d3.json("/widgets/visify/get_bubbletree_data/#{@budget_file.id}/" + levels + '?locale=' + I18n.locale, function(data) {
        _data = data
        centerNode = null;
        current_data = buildData(_data)
        preprocessData(current_data, 9);
        centerNode = last_node;

        chart.set_centerNode(last_node);
        chart.show(current_data);

      })
    }

    function hoverCallback(d) {
      under_sequence.show(d);
      slider_chart.show(d, year);
      slider.show(d, year);
      sidebar.description(d);
    }

    function preprocessData(root, maxNodes) {
      if (root.children.length >= maxNodes) {
        var tmp = sortChildren(root.children);
        tmp.reverse();
        var keep = [], move = [], moveAmount = 0, moveAmountFact = 0, breakdown;
        for (var i in root.children) {
          if (i < maxNodes) {
            keep.push(root.children[i]);
          } else {
            move.push(root.children[i]);
            moveAmount += Math.max(0, root.children[i].amount);
            moveAmountFact += Math.max(0, root.children[i].amount_fact);
          }
        }

        root.children = keep;
        root.children.push({
          'label': I18n.t('other'),
          'name': I18n.t('other'),
          'amount': moveAmount,
          'amount_fact': moveAmountFact,
          'children': move,
          'aggregated': true,
          'breakdown': true,
          'color': 'green',
        });
      }

      for (var i in root.children) {
        if (root.children[i].children)
          preprocessData(root.children[i], maxNodes)
      }
    }

    function sortChildren(children, alternate, sortBy) {
      var tmp = [], odd = true;
      if (sortBy == 'label') {
        sortBy = compareLabels;
        alternate = false;
      } else sortBy = compareAmounts;

      children.sort(sortBy);
      if (alternate) {
        while (children.length > 0) {
          tmp.push(odd ? children.pop() : children.shift());
          odd = !odd;
        }
        return tmp;
      } else {
        return children;
      }

      /*
       * compares two items by amount
       */
      function compareAmounts(a, b) {
          if (a.amount > b.amount) return 1;
          if (a.amount == b.amount) return 0;
          return -1;
      };

      /*
       * compares to item by label
       */
      function compareLabels(a, b) {
          if (a.label > b.label) return 1;
          if (a.label == b.label) return 0;
          return -1;
      };
    }

    var color = d3.scale.category10()

    // get current data for all visifies
    function buildData(item) {
      if (!item.amount)
        return;

      var node = {}

      node['taxonomy'] = item.taxonomy

      var _amount_divider = aTreeChart.divider.amount
      var _recalc_per = aTreeChart.divider.recalc_per

      $.each(item.amount, function(k, v) {
        var amount = (v[year] && v[year][month]) ? v[year][month] : { total: 0 }

        amount_k = (k == "" || k == aTreeChart.data_type) ? 'amount' : 'amount_'+k

        if (aTreeChart.is_cumulative && month != 0 && v[year]) {
          c_amount = 0;
          for(var i = 1; i < month + 1; i++) {
            if(v[year][i]) c_amount += v[year][i]['total']
          }
          node[amount_k] = c_amount

          if (amount_k == 'amount' && amount['fonds']) {
            node['amount_fond'] = {}
            $.each(v[year][month]['fonds'], function(f, vv) {
              var amount_fond_m = 0;
              for(var m = 1; m < month + 1; m++) {
                if (v[year][m] && v[year][m]['fonds'] && v[year][m]['fonds'][f])
                  amount_fond_m += v[year][m]['fonds'][f]
              }
              node['amount_fond'][f] = amount_fond_m / _amount_divider
            })
          }
        } else if (quarter != 0 && v[year]) {
          amount = 0;
          var x = quarter*3 - 2;
          for(var i = x; i < x + 3; i++) {
            if(v[year][i]) amount += v[year][i]['total']
          }
          node[amount_k] = amount
        } else {
          node[amount_k] = amount['total']
          if (amount_k == 'amount' && amount['fonds']) {
             node['amount_fond'] = {}
            $.each(amount['fonds'], function(k, v) {
              node['amount_fond'][k] = v / _amount_divider
            })
          }
        }
      })

      if (node['amount'] == undefined || node['amount'] == 0)
        return;

      if (item['recipient_amount'] != undefined) {
        node['recipient_amount'] = node['amount'] / item['recipient_amount']

        if (_recalc_per == true)
          node['recipient_amount'] = node['recipient_amount'] / _amount_divider
      }
      node['amount'] = node['amount'] / _amount_divider
      node['amount_fact'] = node['amount_fact'] / _amount_divider

      node['history'] = item.amount[aTreeChart.data_type]
      node['total_history'] = item.amount

      // set default color
      if (item['color'] == undefined) {
        item['color'] = color(item['key'])
      }

      $.each(['key', 'label', 'icon', 'color'], function(k, v) {
        node[v] = item[v]
      })

      if (item.children) {
        node.children = []
        $.each(item.children, function(k, v) {
          child = buildData(v)
          if (child) node.children.push(child)
        });
      }

      if(!centerNode && last_node && last_node.taxonomy == node.taxonomy && last_node.key == node.key) {
        last_node = node;
      }
      return node;
    }

  });
