:scss
  //init colors
  $dark-blue: #0c2231;
  $white: #ffffff;
  $no-color: transparent;
  $gray: #999;

  #year_list{
    margin-top: 10px;
    p{
      width: 160px;
    }
    .select2-container {
      &:after {
        content: '\f073';
        font-family: FontAwesome;
        position: absolute;
        left: 0;
        top: 1px;
        cursor: pointer;
        font-size: 20px;
        width: 32px;
        height: 32px;
        background: $dark-blue;
        color: $white;
        padding: 3px 0 2px 7px;
      }
      width: 100%;
      .select2-choice {
        height: 34px;
        border-radius: 0;
        border-color: $dark-blue;
        background-color: $no-color;
        background-image: none;
        abbr{
          right: 32px;
        }
        .select2-chosen {
          text-align: right;
          margin: 3px 30px 3px;
          font-size: 16px;
          color: $gray;
          //text-transform: lowercase;
          float: left;
          padding-top: 0 !important;
        }
        .select2-arrow{
          border-left: 0;
          border-radius: 0;
          background: $dark-blue;
          width: 32px;
          &:before {
            content: '\f04b';
            transform: rotate(90deg);
            font-family: FontAwesome;
            position: absolute;
            right: 0;
            cursor: pointer;
            font-size: 20px;
            width: 32px;
            height: 32px;
            background: $white;
            color: $dark-blue;
            padding: 3px 0 2px 9px;
          }
        }
        &:hover,
        &:focus {
          outline-color: inherit;
        }
      }
    }
    .select2-drop-multi {
      border-color: $dark-blue;
      margin-left: 1px;
      .select2-results {
        padding: 0;
        margin: 4px 0;
      }
    }
    .select2-drop-active {
      border: 1px solid $dark-blue;
      border-top: 0;
      border-radius: 0;
    }
  }




#year_list
  %p
    = select_tag 'years_chart', options_for_select([3, 5, 10]), prompt: t('form.period')

#indicators2.row.clearfix
  -@indicators.each_with_index do |(key,value),index|
    .group.row.col-xs-12{'data-value' => key, id: index.to_s + 'group' }
      %p=key
      -value.each do |k, v|
        .indicator.col-xs-12.col-sm-6.col-md-4.col-lg-3{'data-value' => k}
          - first_year = v[v.keys[0]].keys[0]
          - first_values = v[v.keys[0]][first_year]
          .title
            = k
          .chart
            = render partial: 'indicators_charts', locals: { id: v['id'] }
          .comments
            -#%a.editable-href
            = first_values['comment']
          .reports
            - if first_values['link'] != ''
              = link_to "#{first_values['link']}" do
                %i.fa.fa-download
                = t('widgets.indicators.download_report')
                %span
                  = first_year
            - else
              = link_to "#" do
                %i.fa.fa-download
                = t('widgets.indicators.download_report')
                %span
                  = Date.today.year

:javascript

  $(document).ready(function(){
    var data1;

    $.ajax({
      url: '/indicate/taxonomies/#{@indicate_taxonomy.id}/get_indicators',
      type: "post",
      dataType: "json",
      success: function(json) {
        data1 = json;
        create_graphs(3);
      }
    })

    $('#years_chart').select2({
      placeholder: "#{t('form.period')}"
    }).on('change', function() {
      var num_of_years = $(this).val();
      switch(num_of_years) {
        case '3':
            $('.indicator').attr('class', 'indicator col-xs-12 col-sm-6 col-md-4 col-lg-3');
            break;
        case '5':
             $('.indicator').attr('class', 'indicator col-xs-12 col-md-6 col-lg-4');
            break;
        case '10':
            $('.indicator').attr('class', 'indicator col-xs-12 col-md-6');
            break;
        default:
            num_of_years = '3';
            $('.indicator').attr('class', 'indicator col-xs-12 col-sm-6 col-md-4 col-lg-3');
            break;
      }

      create_graphs(num_of_years);  // create new charts
    });

    function create_graphs(count_years){
      $.each(data1['indicators'], function(key, value) {
        $.each(value, function(k, v) {
          var last_year = getLastYear();
          var years = [];
          var arrays_data = getData();
          var id_chart = v['id'];

          // If call this function for select2
          if (typeof count_years === 'string' ){
            // find container old chart
            var lineChart = $("#" + id_chart).parent();
            // drop old chart canvas
            $("#" + id_chart).remove();
            // add new canvas
            lineChart.append("<canvas id=" + id_chart + ">");
            // drop iframe, drop old charts
            $('.chartjs-hidden-iframe').remove();
          }

          buildLineChart(id_chart, years, arrays_data);

          function getLastYear(){
            var years = [];
            if (v['plan']){
              $.each(v['plan'], function(k_p, v_p){
                years.push(k_p);
              })
            }
            if (v['fact']){
              $.each(v['fact'], function(k_f, v_f){
                years.push(k_f);
              })
            }

            var last_year = years.sort()[years.length-1];
            if (years.length == 0){
              var today = new Date();
              last_year = today.getFullYear();
            }
            return last_year;
          }

          function getData(){
            var arrays_data = {};
            arrays_data['values'] = {};
            arrays_data['values']['values_p'] = [];
            arrays_data['values']['values_f'] = [];

            arrays_data['comments'] = {};
            arrays_data['comments']['comments_p'] = [];
            arrays_data['comments']['comments_f'] = [];

            arrays_data['links'] = {};
            arrays_data['links']['links_p'] = [];
            arrays_data['links']['links_f'] = [];

            for(var i = parseInt(last_year); i > parseInt(last_year) - count_years; i--){
              years.unshift(i);
              if (v['plan'] && v['plan'][i]){
                arrays_data['values']['values_p'].unshift(v['plan'][i]['value']);
                arrays_data['comments']['comments_p'].unshift(v['plan'][i]['comment']);
                arrays_data['links']['links_p'].unshift(v['plan'][i]['link']);
              } else{
                arrays_data['values']['values_p'].unshift("");
                arrays_data['comments']['comments_p'].unshift("");
                arrays_data['links']['links_p'].unshift("");
              }
              if (v['fact'] && v['fact'][i]){
                arrays_data['values']['values_f'].unshift(v['fact'][i]['value']);
                arrays_data['comments']['comments_f'].unshift(v['fact'][i]['comment']);
                arrays_data['links']['links_f'].unshift(v['fact'][i]['link']);
              } else{
                arrays_data['values']['values_f'].unshift("");
                arrays_data['comments']['comments_f'].unshift("");
                arrays_data['links']['links_f'].unshift("");
              }
            }
            return arrays_data;
          }
        })
      })
    }

    function buildLineChart(id, array_years, arrays_data) {
      // var plan_fact = [];
      // function plan_fact_data(array) {
      //   $.each(array, function(k, v) {
      //     plan_fact.push(v);
      //   })
      // }
      // plan_fact_data(arrays_data['values']['values_p']);
      // plan_fact_data(arrays_data['values']['values_f']);
      // var max_value = Math.max.apply(null, plan_fact);
      // step = Math.round(max_value / 100) * 10;

      // create chart with 2 lines
      var c = $("#" + id).get(0);
      var ctx = c.getContext('2d');

      var myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: array_years,
          comments: arrays_data['comments'],
          links: arrays_data['links'],
          datasets: [
            {
              label: "plan",

              lineTension: 0.5,
              // fill: false,
              backgroundColor: "rgba(75,192,192,0.4)",

              borderColor: "#fff",
              borderCapStyle: 'butt',
              borderDash: [],
              borderDashOffset: 0.1,
              borderJoinStyle: 'miter',

              pointRadius: 5,
              pointBorderWidth: 2,
              pointHitRadius: 4,
              pointBackgroundColor: "#0c2231",
              pointBorderColor: "#fff",

              pointHoverRadius: 5,
              pointHoverBorderWidth: 2,
              pointHoverHitRadius: 4,
              pointHoverBackgroundColor: "#ffd304",
              pointHoverBorderColor: "#fff",

              data: arrays_data['values']['values_p'],
              spanGaps: false
            },
            {
              label: "fact",
              lineTension: 0.5,

              // fill: false,
              backgroundColor: "rgba(240, 177, 80, 0.9)",

              borderColor: "#fff",
              borderCapStyle: 'butt',
              borderDash: [],
              borderDashOffset: 0.1,
              borderJoinStyle: 'miter',

              pointRadius: 5,
              pointBorderWidth: 2,
              pointHitRadius: 4,
              pointBackgroundColor: "#0c2231",
              pointBorderColor: "#fff",

              pointHoverRadius: 5,
              pointHoverBorderWidth: 2,
              pointHoverHitRadius: 4,
              pointHoverBackgroundColor: "#ffd304",
              pointHoverBorderColor: "#fff",

              data: arrays_data['values']['values_f'],

              spanGaps: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          scaleStartValue : 0,
          legend: {
            display: false
          },
          scales: {
            xAxes: [
              {
                gridLines: {
                  display: false,
                  color: '#fff',
                  // lineWidth: 1,
                  zeroLineWidth: 3,
                  zeroLineColor: '#fff'
                },
                ticks: {
                  fontColor: '#fff',
                }
              }
            ],
            yAxes: [
              {
                id: 'y-axis-0',
                gridLines: {
                  // display: true,
                  color: '#fff',
                  // lineWidth: 1,
                  zeroLineWidth: 3,
                  zeroLineColor: '#fff'
                },
                scaleLabel: {
                  fontColor: '#fff'
                },
                ticks: {
                  fontColor: '#fff',
                  padding: 20,
                  // min: 0,
                  maxTicksLimit: 6,
                  // stepSize: step
                }
              }
            ]
          },
          onClick: handleClick
        }
      });

      function handleClick(evt){
        var activeElement = myChart.getElementAtEvent(evt);
        var data = activeElement[0]['_chart']['config']['data'];

        var point_position = activeElement[0]._index;

        settingCommentLinkForPoint();

        function getCommentLink(str){
          // Get comment or link
          var values = data[str];
          var point_type = activeElement[0]._datasetIndex;

          switch(point_type){
            case 0:
              value = values[str + '_p'][point_position];
              break;
            case 1:
              value = values[str + '_f'][point_position];
              break;
            default:
              value = ''
          }

          return value;
        }

        function settingCommentLinkForPoint(){
          // Refactor this code if changed DOM structure in widgets/town_profile/indicates.html

          var comment = getCommentLink('comments');
          var link = getCommentLink('links');

          // set comment to chart
          $parent_div = $(activeElement[0]['_chart']['canvas']).parent().parent();
          $div_comments = $parent_div.next('.comments');
          $div_comments.text(comment);

          // set link to chart
          $div_links = $div_comments.next('.reports');
          $download_link = $div_links.children('a');
          $download_link.attr("href", link);

          // set year to link for point
          var year = data['labels'][point_position];
          $download_link.children('span').text(year);

          // setting css to link
          if (link == '#' || link == ''){
            $download_link.css("color", "grey");
          } else{
            $download_link.css("color", "#2A4989");
          }
        }
      }
    }
  });

-##indicators.clearfix
  -@indicators.each_with_index do |(key,value),index|
    .group.col-xs-12{'data-value' => key, :id => index.to_s + 'group' }
      %p=key
      -value.each_with_index do |(k,v),i|
        .indicator.col-xs-12.col-sm-6.col-md-4.col-lg-3{'data-value' => k}
          .title=k
          .graph
          .comments
            %a.editable-href

-#:javascript
-#
-#  var num_of_years = 3;
-#  var current_user;
-#  var data;
-#
-#  $(document).ready(function(){
-#
-#    $.ajax({
-#      url: '/indicate/taxonomies/#{@indicate_taxonomy.id}/get_indicators',
-#      type: "post",
-#      dataType: "json",
-#      success: function(json) {
-#       data = json;
-#       create_graphs(num_of_years);
-#      }
-#    })
-#
-#    current_user = "#{@current_user}";
-#
-#    // $('#year_list a').click(function(e) {
-#    //   $("svg circle").tooltip('destroy');
-#    //   d3.selectAll('.graph svg').remove();
-#    //   num_of_years = $(e.target).attr('data-value');
-#    //   $('#year_list .active').removeClass('active');
-#    //   $(e.target).addClass('active');
-#    //   switch(num_of_years) {
-#    //     case '3':
-#    //         $('.indicator').attr('class', 'indicator col-xs-12 col-sm-6 col-md-4 col-lg-3');
-#    //         break;
-#    //     case '5':
-#    //          $('.indicator').attr('class', 'indicator col-xs-12 col-md-6 col-lg-4');
-#    //         break;
-#    //     case '10':
-#    //         $('.indicator').attr('class', 'indicator col-xs-12 col-md-6');
-#    //         break;
-#    //     default:
-#    //         num_of_years = 3;
-#    //         $('.indicator').attr('class', 'indicator col-xs-12 col-sm-6 col-md-4 col-lg-3');
-#    //         break;
-#    //   }
-#    //   create_graphs2(num_of_years);
-#    // })
-#  })
-#
-#  $(window).resize(function() {
-#    $("svg circle").tooltip('destroy');
-#    d3.selectAll('.graph svg').remove();
-#    create_graphs(num_of_years);
-#  });
-#
-#  function create_graphs(num_of_years) {
-#    var editor_locale;
-#    if(I18n.locale == "uk") {
-#      editor_locale = "ua-UA";
-#    } else {
-#      editor_locale = "";
-#    }
-#    $.each(data['indicators'], function(key, value) {
-#      $.each(value, function(k, v) {
-#        var current_year = new Date().getFullYear() - 1;
-#        var years = [];
-#        var values = [];
-#        var data = [];
-#        $.each(v, function(year, year_value){
-#          if(parseInt(year) >= current_year-(num_of_years-1)) {
-#            years.push(parseInt(year));
-#            values.push(parseFloat(year_value['value']));
-#            data.push({"year": year, "value": year_value['value']});
-#          }
-#        })
-#        data.sort(function(a, b) { return a["year"] - b["year"]; } );
-#
-#        // define dimensions of graph
-#        var m = [30, 45, 30, 45]; // margins
-#        var w = $('div[data-value="' + k + '"]').width() - m[1] - m[3]; // width
-#        var h = 200 - m[0] - m[2]; // height
-#
-#        // X scale will fit all values from data[] within pixels 0-w
-#        var x = d3.scale.linear().domain([current_year-(num_of_years-1), current_year]).range([0, w]);
-#        // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
-#        var y = d3.scale.linear().domain([d3.min(values) - Math.abs(d3.min(values)/10), d3.max(values)]).range([h, 0]);
-#            // automatically determining max range can work something like this
-#            // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
-#
-#        // create area under graph
-#        var area = d3.svg.area()
-#            .x(function(d) { return x(d["year"]); })
-#            .y0(h)
-#            .y1(function(d) { return y(d['value']); })
-#            // make the line curved
-#            .interpolate("monotone")
-#
-#        // create a line function that can convert data[] into x and y points
-#        var line = d3.svg.line()
-#            // assign the X function to plot our line as we wish
-#            .x(function(d,i) { return x(d["year"]); })
-#            .y(function(d) { return y(d['value']); })
-#            // make the line curved
-#            .interpolate("monotone")
-#
-#        // Add an SVG element with the desired dimensions and margin.
-#        graph = d3.select('div[data-value="' + k + '"] .graph').append("svg:svg")
-#              .attr("width", w + m[1] + m[3])
-#              .attr("height", h + m[0] + m[2])
-#              .attr("version", 1.1)
-#              .attr('fill','none')
-#              .attr("xmlns", "http://www.w3.org/2000/svg")
-#            .append("svg:g")
-#              .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
-#
-#        // create yAxis
-#        var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(false).ticks(num_of_years-1).tickFormat(d3.format("d"));
-#        // Add the x-axis.
-#        graph.append("svg:g")
-#              .attr("class", "x axis")
-#              .attr("transform", "translate(0," + h + ")")
-#              .style("stroke", "lightgrey")
-#              .call(xAxis);
-#
-#        // create left yAxis
-#        var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
-#
-#        // add area under graph
-#        graph.append("path")
-#                .datum(data)
-#                .attr("class", "area")
-#                .attr('fill' ,'lightgray')
-#                .attr("d", area);
-#        // Add the line by appending an svg:path element with the data line we created above
-#        // do this AFTER the axes above so that the line is above the tick-lines
-#        graph.append("svg:path")
-#             .attr("d", line(data));
-#
-#        graph.selectAll("dot")
-#                .data(data)
-#              .enter().append("circle")
-#                .attr("class", function(d) { return d["year"] == current_year ? "active_point" : ""; })
-#                .attr("r", function(d) { return d["year"] == current_year ? "10" : "8"; })
-#                .attr("cx", function(d) { return x(d["year"]); })
-#                .attr("cy", function(d) { return y(d['value']); })
-#                //.attr("fill", "#6EC4DA")
-#                .attr("title", function(d) { return d['value']; })
-#                .on("mouseover", mouseover)
-#                .on("mouseout", mouseout)
-#                .on("click", mouseclick);
-#
-#        /* graph.selectAll("dot")
-#          .data(data)
-#        .enter()
-#        .append("text")
-#        .attr('x',function(d) { return x(d["year"]) - 10 ; })
-#        .attr('y',function(d) { return y(d['value']) - 10; })
-#        .attr('fill','red')
-#        .html(function(d) { return d['value']; })
-#        .attr('test','test'); */
-#
-#        graph.selectAll("dot")
-#          .data(data)
-#        .enter()
-#        .append("rect")
-#        .attr('rx','5')
-#        .attr('ry','5')
-#        .attr('width','50')
-#        .attr('height','20')
-#        .attr('text-anchor','middle')
-#        .attr('x',function(d) { return x(d["year"]) - 25 ; })
-#        .attr('y',function(d) { return y(d['value']) - 30; })
-#        .attr('fill','#B1B1B1');
-#
-#
-#        graph.selectAll("dot")
-#          .data(data)
-#        .enter()
-#        .append("text")
-#        .attr('x',function(d) { return x(d["year"]); })
-#        .attr('y',function(d) { return y(d['value']) - 15; })
-#        .attr('fill','white')
-#        .attr('text-anchor','middle')
-#        .style('font-size','12')
-#        .html(function(d) { return d['value']; })
-#        .attr('test','test');
-#
-#        if(v[current_year]) {
-#          var indicator_id = v[current_year]['id'];
-#
-#          if("#{@current_user.town}" == "#{@indicate_taxonomy.town}" || "#{@current_user.has_role? :admin}" == "true") {
-#            $('div[data-value="' + k + '"] .comments a').html(v[current_year]['comment'])
-#                                                        .attr("href", "#")
-#                                                        .attr("id", "indicate_indicator")
-#                                                        .attr("data-type", "wysihtml5")
-#                                                        .attr("data-escape", false)
-#                                                        .attr("data-pk", indicator_id)
-#                                                        .attr("data-emptytext", "додати коментар...")
-#                                                        .attr("data-resource", "documentation_category")
-#                                                        .attr("data-url", "/indicate/indicators/" + indicator_id);
-#
-#            $('div[data-value="' + k + '"] .comments .editable-href').editable({
-#              escape: false,
-#              wysihtml5: {
-#                  "font-styles": true, // Font styling, e.g. h1, h2, etc.
-#                  "emphasis": true, // Italics, bold, etc.
-#                  "lists": true, // (Un)ordered lists, e.g. Bullets, Numbers.
-#                  "html": false, // Button which allows you to edit the generated HTML.
-#                  "link": true, // Button to insert a link.
-#                  "image": true, // Button to insert an image.
-#                  "color": false, // Button to change color of font
-#                  "size": 'xs', // options are xs, sm, lg
-#                  "locale": editor_locale
-#               },
-#               success: function(response, newValue) {
-#                   console.log(newValue)
-#                   v[current_year]['comment'] = newValue;
-#               }
-#            });
-#          } else {
-#            $('div[data-value="' + k + '"] .comments').html(v[current_year]['comment']);
-#          }
-#        }
-#
-#        function mouseclick(d) {
-#          if(d["year"] != current_year) {
-#            $('div[data-value="' + k + '"]').find(".active_point").attr("class", " ").attr("stroke", "none").attr("r","8");
-#            $(this).attr("class", "active_point").attr("r","10");
-#            current_year = d["year"];
-#            var indicator_id = v[current_year]['id'];
-#
-#            if("#{@current_user.town}" == "#{@indicate_taxonomy.town}" || "#{@current_user.has_role? :admin}" == "true") {
-#              $('div[data-value="' + k + '"] .comments .editable-href').attr("data-pk", indicator_id)
-#                                                          .attr("data-url", "/indicate/indicators/" + indicator_id);
-#
-#              $('div[data-value="' + k + '"] .comments .editable-href').html(v[current_year]['comment']);
-#              $('div[data-value="' + k + '"] .comments .editable-href').editable('option', 'value', v[current_year]['comment']);
-#              $('div[data-value="' + k + '"] .comments .editable-href').editable('option', 'url', "/indicate/indicators/" + indicator_id);
-#            } else {
-#              $('div[data-value="' + k + '"] .comments').html(v[current_year]['comment']);
-#            }
-#          }
-#        }
-#
-#        function mouseover(d) {
-#          d3.select(this)
-#            .attr("stroke", "#6EC4DA")
-#            .attr("cursor", "pointer")
-#            .attr("stroke-width", 4);
-#        }
-#
-#        function mouseout(d) {
-#          if(d["year"] != current_year) {
-#            d3.select(this)
-#              .attr("stroke", "none");
-#          }
-#        }
-#
-#      })
-#    })
-#
-#   // var circles = $("svg circle");
-#   // console.log(circles);
-#   // for(var i = 0;i < circles.length;i++){
-#      //console.log('x : ' + circles[i].cx.animVal.value);
-#      //console.log('y : ' + circles[i].cy.animVal.value);
-#     // console.log(circles[i].toString());
-#      //var str_to_array_space = circles[i].split(' ');
-#      //console.log(str_to_array_space);
-#    //}
-#    $("svg circle").tooltip({
-#        'container': 'body',
-#        'placement': 'top',
-#        'trigger': 'manual'     // remove this string to make on hover
-#    });
-#
-#    // make tooltips visible always, pointer events - none
-#    window.setTimeout(function() {
-#      $('.bootstrap_flash').html('');
-#      //$("svg circle").tooltip('show');
-#    }, 1000);
-#  }
