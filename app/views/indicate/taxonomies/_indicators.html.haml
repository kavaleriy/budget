:scss
  //init colors
  $dark-blue: #0c2231;
  $white: #ffffff;
  $no-color: transparent;
  $gray: #999;
  $box-icon: 32px;

  #indicators.fullscreen{
    overflow-y: auto;
    width: 100%;
    height: 100%;
    .indicators-header{
      margin: 5px 0 0;
      #fullscreen{
      }
    }
    .indicators-container{
      margin: 0;
      .group{
        margin: 0;
      }
    }
  }
  #indicators{
    .indicators-header{
      margin-top: 5px;
      #fullscreen{
        i{
          font-size: 35px;
        }
      }
      #year_list{
        .select2-container {
          width: 160px;
          &:after {
            content: '\f073';
            font-family: FontAwesome;
            position: absolute;
            left: 0;
            top: 1px;
            cursor: pointer;
            font-size: 20px;
            width: $box-icon;
            height: $box-icon;
            background: $dark-blue;
            color: $white;
            padding: 3px 0 2px 7px;
          }
          .select2-choice {
            height: 34px;
            border-radius: 0;
            border-color: $dark-blue;
            background-color: $no-color;
            background-image: none;
            abbr{
              right: $box-icon;
            }
            .select2-chosen {
              text-align: right;
              margin: 3px 30px 3px;
              font-size: 16px;
              color: $gray;
              //text-transform: lowercase;
              float: left;
              padding-top: 0 !important;
            }
            .select2-arrow{
              border-left: 0;
              border-radius: 0;
              //background: $dark-blue;
              border-left: 1px solid $dark-blue;
              width: $box-icon;
              &:before {
                content: '\f04b';
                transform: rotate(90deg);
                font-family: FontAwesome;
                position: absolute;
                //right: 0;
                cursor: pointer;
                font-size: 20px;
                width: $box-icon;
                height: $box-icon;
                //border-right: 1px solid $dark-blue;
                background: $white;
                color: $dark-blue;
                //padding: 3px 0 2px 9px;
                padding: 5px 0 2px 9px;
              }
            }
            &:hover,
            &:focus {
              outline-color: inherit;
            }
          }
        }
      }
    }
    .indicators-container{
      .group{
        padding: 0;
      }
    }
  }

  .select2-drop-multi {
    border-color: $dark-blue;
    margin-left: 1px;
    .select2-results {
      padding: 0;
      margin: 4px 0;
    }
  }
  .select2-drop-active {
    border: 1px solid $dark-blue;
    border-top: 0;
    border-radius: 0;
  }



#indicators
  .indicators-header.row
    .col-xs-10#year_list
      = select_tag 'years_chart', options_for_select([3, 5, 10]), prompt: t('form.period')
    .col-xs-2#fullscreen{'data-module' => 'indicators'}
      = render partial: 'widgets/town_profile/fullscreen_btn'
  .indicators-container.row.clearfix
    -@indicators.each_with_index do |(key,value),index|
      .group.col-xs-12{'data-value' => key, id: index.to_s + 'group' }
        %p=key
        -value.each do |k, v|
          .indicator.col-xs-12.col-sm-6.col-md-4.col-lg-3{'data-value' => k}
            - first_year = v[v.keys[0]].keys[0]
            - first_values = v[v.keys[0]][first_year]
            .title
              = k
            .unit
              = "(#{v['unit']})"
            .chart
              = render partial: 'indicate/taxonomies/indicators_chart', locals: { id: v['id'] }
            .comments
              = first_values['comment']
            .reports
              - unless first_values['link'].blank?
                = link_to "#{first_values['link']}" do
                  %i.fa.fa-download
                  = t('widgets.indicators.download_report')
                  %span
                    = first_year
                    = t("js.visify.#{v.keys[0]}")
              - else
                = link_to "#", class: 'no-link' do
                  %i.fa.fa-download
                  = t('widgets.indicators.download_report')
                  %span
                    = '__'

:javascript

  $(document).ready(function(){
    var data1;

    $.ajax({
      url: '/indicate/taxonomies/#{@indicate_taxonomy.id}/get_indicators',
      type: "post",
      dataType: "json",
      success: function(json) {
        data1 = json;
        create_graphs(3);
      }
    })

    $('#years_chart').select2({
      placeholder: "#{t('form.period')}"
    }).on('change', function() {
      var num_of_years = $(this).val();
      switch(num_of_years) {
        case '3':
            $('.indicator').attr('class', 'indicator col-xs-12 col-sm-6 col-md-4 col-lg-3');
            break;
        case '5':
             $('.indicator').attr('class', 'indicator col-xs-12 col-md-6 col-lg-4');
            break;
        case '10':
            $('.indicator').attr('class', 'indicator col-xs-12 col-md-6');
            break;
        default:
            num_of_years = '3';
            $('.indicator').attr('class', 'indicator col-xs-12 col-sm-6 col-md-4 col-lg-3');
            break;
      }

      create_graphs(num_of_years);  // create new charts
    });

    function create_graphs(count_years){
      $.each(data1['indicators'], function(key, value) {
        $.each(value, function(k, v) {
          var last_year = getLastYear();
          var years = [];
          var arrays_data = getData();
          var id_chart = v['id'];

          // If call this function for select2
          if (typeof count_years === 'string' ){
            // find container old chart
            var lineChart = $("#" + id_chart).parent();
            // drop old chart canvas
            $("#" + id_chart).remove();
            // add new canvas
            lineChart.append("<canvas id=" + id_chart + ">");
            // drop iframe, drop old charts
            $('.chartjs-hidden-iframe').remove();
          }

          buildLineChart(id_chart, years, arrays_data);

          function getLastYear(){
            var years = [];
            if (v['plan']){
              $.each(v['plan'], function(k_p, v_p){
                years.push(k_p);
              })
            }
            if (v['fact']){
              $.each(v['fact'], function(k_f, v_f){
                years.push(k_f);
              })
            }

            var last_year = years.sort()[years.length-1];
            if (years.length == 0){
              var today = new Date();
              last_year = today.getFullYear();
            }
            return last_year;
          }

          function getData(){
            var arrays_data = {};
            arrays_data['values'] = {};
            arrays_data['values']['values_p'] = [];
            arrays_data['values']['values_f'] = [];

            arrays_data['comments'] = {};
            arrays_data['comments']['comments_p'] = [];
            arrays_data['comments']['comments_f'] = [];

            arrays_data['links'] = {};
            arrays_data['links']['links_p'] = [];
            arrays_data['links']['links_f'] = [];

            for(var i = parseInt(last_year); i > parseInt(last_year) - count_years; i--){
              years.unshift(i);
              if (v['plan'] && v['plan'][i]){
                arrays_data['values']['values_p'].unshift(v['plan'][i]['value']);
                arrays_data['comments']['comments_p'].unshift(v['plan'][i]['comment']);
                arrays_data['links']['links_p'].unshift(v['plan'][i]['link']);
              } else{
                arrays_data['values']['values_p'].unshift(null);
                arrays_data['comments']['comments_p'].unshift("");
                arrays_data['links']['links_p'].unshift("");
              }
              if (v['fact'] && v['fact'][i]){
                arrays_data['values']['values_f'].unshift(v['fact'][i]['value']);
                arrays_data['comments']['comments_f'].unshift(v['fact'][i]['comment']);
                arrays_data['links']['links_f'].unshift(v['fact'][i]['link']);
              } else{
                arrays_data['values']['values_f'].unshift(null);
                arrays_data['comments']['comments_f'].unshift("");
                arrays_data['links']['links_f'].unshift("");
              }
            }
            return arrays_data;
          }
        })
      })
    }

    function buildLineChart(id, array_years, arrays_data) {
      // var plan_fact = [];
      // function plan_fact_data(array) {
      //   $.each(array, function(k, v) {
      //     plan_fact.push(v);
      //   })
      // }
      // plan_fact_data(arrays_data['values']['values_p']);
      // plan_fact_data(arrays_data['values']['values_f']);
      // var max_value = Math.max.apply(null, plan_fact);
      // step = Math.round(max_value / 100) * 10;

      // create chart with 2 lines
      var c = $("#" + id).get(0);
      var ctx = c.getContext('2d');

      var myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: array_years,
          comments: arrays_data['comments'],
          links: arrays_data['links'],
          datasets: [
            {
              label: "plan",

              lineTension: 0.5,
              // fill: false,
              backgroundColor: "rgba(75,192,192,0.4)",

              borderColor: "#fff",
              borderCapStyle: 'butt',
              borderDash: [],
              borderDashOffset: 0.1,
              borderJoinStyle: 'miter',

              pointRadius: 5,
              pointBorderWidth: 2,
              pointHitRadius: 4,
              pointBackgroundColor: "#0c2231",
              pointBorderColor: "#fff",

              pointHoverRadius: 5,
              pointHoverBorderWidth: 2,
              pointHoverHitRadius: 4,
              pointHoverBackgroundColor: "#ffd304",
              pointHoverBorderColor: "#fff",

              data: arrays_data['values']['values_p'],
              spanGaps: true
            },
            {
              label: "fact",
              lineTension: 0.5,

              // fill: false,
              backgroundColor: "rgba(240, 177, 80, 0.9)",

              borderColor: "#fff",
              borderCapStyle: 'butt',
              borderDash: [],
              borderDashOffset: 0.1,
              borderJoinStyle: 'miter',

              pointRadius: 5,
              pointBorderWidth: 2,
              pointHitRadius: 4,
              pointBackgroundColor: "#0c2231",
              pointBorderColor: "#fff",

              pointHoverRadius: 5,
              pointHoverBorderWidth: 2,
              pointHoverHitRadius: 4,
              pointHoverBackgroundColor: "#ffd304",
              pointHoverBorderColor: "#fff",

              data: arrays_data['values']['values_f'],

              spanGaps: true,
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          scaleStartValue : 0,
          legend: {
            display: false
          },
          // tooltips: {
          //   callbacks: {
          //     label: function(tooltipItems, data) {
          //       // add unit in tooltip
          //      return data.datasets[tooltipItems.datasetIndex].label +': ' + tooltipItems.yLabel + "#{t('short_units.unit')}.";
          //     }
          //   }
          // },
          scales: {
            xAxes: [
              {
                gridLines: {
                  display: false,
                  color: '#fff',
                  // lineWidth: 1,
                  zeroLineWidth: 3,
                  zeroLineColor: '#fff'
                },
                ticks: {
                  fontColor: '#fff',
                }
              }
            ],
            yAxes: [
              {
                id: 'y-axis-0',
                gridLines: {
                  // display: true,
                  color: '#fff',
                  // lineWidth: 1,
                  zeroLineWidth: 3,
                  zeroLineColor: '#fff'
                },
                scaleLabel: {
                  fontColor: '#fff'
                },
                ticks: {
                  fontColor: '#fff',
                  padding: 20,
                  // min: 0,
                  maxTicksLimit: 6,
                  // stepSize: step
                }
              }
            ]
          },
          onClick: setCommentLinkForPoint
        }
      });

      function setCommentLinkForPoint(evt){
        var activeElement = myChart.getElementAtEvent(evt);
        var data = activeElement[0]['_chart']['config']['data'];

        var point_position = activeElement[0]._index;

        // Refactor this code if csettingCommentLinkForPointanged DOM structure in widgets/town_profile/indicates.html
        var point_order = activeElement[0]._datasetIndex;
        var comment = getCommentLink('comments', point_order);
        var link = getCommentLink('links', point_order);

        // set comment to chart for point
        var parent_div = $(activeElement[0]['_chart']['canvas']).parent().parent();
        var div_comments = parent_div.next('.comments');
        div_comments.text(comment);

        // set link to chart for point
        var div_links = div_comments.next('.reports');
        var download_link = div_links.children('a');
        download_link.attr("href", link);

        // set year to link for point
        var year = data['labels'][point_position];
        // set status to link for point
        var status = getStatus(activeElement[0]._datasetIndex);
        download_link.children('span').text(year + ' ' + status);

        // setting view of link
        if (link == '' || link == null || link == '#'){
          download_link.addClass('no-link');
        } else{
          download_link.removeClass('no-link');
        }

        function getCommentLink(str, point_order){
          // Get comment or link
          var values = data[str];
          return point_order == 0 ? values[str + '_p'][point_position] : values[str + '_f'][point_position];
        }

        function getStatus(data_index){
          // Get localise status string
          return data_index == 0 ? I18n.t('js.visify.plan') : I18n.t('js.visify.fact');
        }
      }
    }
  });