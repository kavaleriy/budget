:scss
  // init colors
  $button-background: #0c2231;
  $button-border: #0c2231;
  $button-active: #ffd304;
  $button-text: white;
  $search-background: white;
  $search-border: #0c2231;
  $black: black;
  $white: white;

  #search-data.fullscreen{
    width: 100%;
    height: 100%;
    padding: 5px;
    overflow-y: auto;
    overflow-x: hidden;
  }
  #search-data {
    #fullscreen{
      i{
        font-size: 30px;
      }
    }
    & .row > div {
      min-height: 30px;
    }
    .form-group {
      float: left;
      width: 100%;
      .select2-container {
        border: none;
        .select2-choice {
          height: 33px;
          line-height: 33px;
          background: $search-background;
          border: 1px solid $search-border;
          border-radius: 0;
          &:before {
            content: '\f002';
            font-family: FontAwesome;
            position: absolute;
            right: 0;
            cursor: pointer;
            font-size: 20px;
            color: $search-background;
            width: 33px;
            background: $search-border;
            text-align: center;
            margin: -2px auto;
          }
          .select2-chosen {
            padding-top: 0;
            margin-right: 55px;
          }
          .select2-search-choice-close {
            right: 40px;
          }
          .select2-arrow {
            display: none;
          }
        }
      }
    }
    .advanced_search_button,
    .btn-switch-role {
      background: $button-background;
      border: 2px solid $button-border;
      color: $button-text;
      font-weight: bold;
      min-width: 118px;
      border-radius: 0;
      padding: 4px 10px;
    }
    .btn-switch-role[for="_role_payers"] {
      &:before {
        content: '\f111';
        font-family: FontAwesome;
        padding-right: 5px;
      }
    }
    .btn-switch-role[for="_role_recipt"] {
      margin-right: 30px;
      &:before {
        content: '\f0c8';
        font-family: FontAwesome;
        padding-right: 5px;
      }
    }
    .btn-switch-role:before {
      color: $button-text;
    }
    input:checked + .btn-switch-role {
      background: $button-text;
      color: $button-background;
      border: 1px solid $button-border;
      &:after {
        content: '';
        display: block;
        border: 1px solid $button-active;
      }
      &:before {
        color: $button-active;
      }
    }
    .search-button {
      background: $button-background;
      color: $button-text;
      text-align: center;
      height: 33px;
      width: 33px;
      .fa-search {
        bottom: 0;
      }
    }
    #most-received {
      height: 400px;
      display: none;
      margin-bottom: 70px;
      .subtitle {
        height: 30px;
        font-family: 'Lato', sans-serif;
        font-size: 18px;
        font-weight: 500;
      }
      canvas {
        height: 100%;
        width: 100%;
      }
    }
  }
  @media screen and (max-width: 1024px) {
    #search-data {
      #most-received {
        height: 300px;
      }
    }
  }
  @media screen and (max-width: 992px) {
    #search-data {
      #most-received {
        height: 200px;
      }
    }
  }
  .social-btns {
    margin: 5px 0;
  }
   // hide sidebar for share
  .addthis-smartlayers-desktop {
    display: none;
  }

  .sharing {
    //display: none;
    padding-bottom: 30px;
  }
  .copyright_info {
    font-size: 75%;
    //position: absolute;
    //bottom: 5px;
    p {
      margin: 0;
    }
  }
  [data-tooltip] {
    position: relative;
    z-index: 2;
    cursor: pointer;
    &:before,
    &:after {
      visibility: hidden;
      opacity: 0;
      pointer-events: none;
    }
    &:before {
      position: absolute;
      bottom: 150%;
      left: 6%;
      margin-bottom: -48px;
      margin-left: -220px;
      padding: 7px;
      width: 204px;
      -webkit-border-radius: 3px;
      -moz-border-radius: 3px;
      border-radius: 3px;
      background-color: hsla(0, 0%, 20%, 0.9);
      color: $button-text;
      content: attr(data-tooltip);
      text-align: center;
      font-size: 14px;
      line-height: 1.2;
    }
    &:after {
      position: absolute;
      bottom: 30%;
      left: 15%;
      margin-left: -30px;
      width: 0;
      border-top: 5px solid transparent;
      border-bottom: 5px solid transparent;
      border-left: 5px solid hsla(0, 0%, 20%, 0.9);
      content: " ";
      font-size: 0;
      line-height: 0;
    }
    &:hover {
      &:before, &:after {
        visibility: visible;
        opacity: 1;
      }
    }
  }
  // custom styles for spinner
  .vis-spinner{
    #spinner-container{
      background: none;
      .spinner{
        .sk-circle:before{
          background-color: #ffd304;
        }
      }
    }
  }

#search-data
  = simple_form_for '', remote: true do |f|
    .row
      .col-sm-6.col-md-7
        -# use for pre-selecting payer or recipt if params exists
        - if params['payers_edrpous'].blank? and params['recipt_edrpous'].blank?
          = f.input(:item, type: 'hidden', collection: @items.map{ |classd| ["#{classd.pnaz} #{classd.edrpou}", classd.edrpou] }, input_html: {'data-town-id' => params['town_id']}, label: false)
        - else
          = f.input(:item, type: 'hidden', collection: @items.map{ |classd| ["#{classd.pnaz} #{classd.edrpou}", classd.edrpou] }, input_html: {'data-town-id' => params['town_id']}, label: false, selected: params['payers_edrpous'] || params['recipt_edrpous'])
      .col-sm-6.col-md-5
        .pull-right#fullscreen{'data-module' => 'search-data'}
          = render partial: 'widgets/town_profile/fullscreen_btn'
        = f.collection_radio_buttons :role, [['payers', t('.payer')] ,['recipt', t('.recipt')]], :first, :last, {checked: params['recipt_edrpous'].blank? ? 'payers' : 'recipt'} do |b|
          = b.radio_button(style: 'display: none') + b.label(class: 'btn btn-default btn-switch-role')
        = link_to t('modules.classifier.advanced_search.search'), '#', class: 'btn btn-primary advanced_search_button', id: 'search'
        = link_to modules_classifier_advanced_search_path(@town), id: 'advanced_search_button', class: 'btn btn-primary advanced_search_button', remote: request.format.html? ? false : true do
          %i.fa.fa-cogs
          = t('.advanced_button')

  .results
  - if request.format.html?
    = render partial: 'tell_more'
  - else
    .row.sharing
      .col-xs-6
        .social-btns#share_results
      .col-xs-6.text-right
        .embeded-btn
          = render partial: 'embeded_btn', locals: {url: modules_classifier_search_data_path(@town)}

  #most-received
    = render partial: 'chart'

  .vis-spinner
    = render partial: 'layouts/spinner'

  .copyright_info
    = render partial: 'copyright_info'

:javascript
  $(document).ready(function() {

    // init select2 and add event -> search if change value (if select not empty)
    $('#_item').select2({
      placeholder: I18n.t('modules.classifier.search_data.simple_form_placeholder'),
      allowClear: true
    }).on('change', function(data) {
      // check for empty value, if empty -> do nothing
      if(data.val || check_edrpou(data.target.value)) {
        classifier_search("#{modules_classifier_search_e_data_path}", init_search_params(), iframe_src(data.val || data.target.value));
      }
    });

    function iframe_src(code){
      var town = $('#_item').data('town-id');
      var url_type = $('[name="[role]"]:checked').val() + '_edrpous';
      var url = 'https://' + window.location.host + '/modules/classifier/by_' + url_type + '/' +  town + '/' + code;

      return url;
    }

    // If user input new code edrpou
    // for embed iframe with needed enterprise
    $(document).on('keyup', '.select2-input', function(e){
      var value = e.target.value;
      if(e.keyCode == 13 && check_edrpou(value)){
        // add zero if edrpou short (56789 ~ 00056789)
        var select_value =  value.padStart(8, 0);
        
        $('#_item').prepend($('<option>').text(select_value).attr('selected', true)).select2('close');
        $('#_item').val(select_value).trigger('change.select2');
        $('#_item').trigger('change');
      }
    })

    function check_edrpou(edrpou){
      // regex from 5 to 8 number length
      var length_regex = /^[0-9]{5,8}$/;
      return length_regex.test(edrpou);
    }

    $('#search').on('click', function(){
      if($('#_item').val()) {
        classifier_search("#{modules_classifier_search_e_data_path}", init_search_params());
      }
    });

    // add event -> search if change value (if select not empty)
    $('[name="[role]"]').on('change', function() {
      // check for empty value, if empty -> do nothing
      if($('#_item').val()) {
        classifier_search("#{modules_classifier_search_e_data_path}", init_search_params(), iframe_src( $('#_item').val()));
        // var title = $('[name="[role]"]:checked').val() == 'payers' ? I18n.t('modules.classifier.chart.most_payers') : I18n.t('modules.classifier.chart.most_received');
        // $('#most-received .subtitle').html(title);
      }
    });

    // add new event and clear previous events for sorting search results
    $('.results').on('click', '#edata_payments th', function() {
      var _this = $(this);
      $('#edata_payments th').not(_this).removeClass('active').attr('data-sort-direction', 'asc');
      var sort_col = _this.attr('data-column'),
          sort_dir = _this.attr('data-sort-direction');
      classifier_search("#{modules_classifier_search_e_data_path}", init_search_params(sort_col, sort_dir));
      _this.attr('data-sort-direction', sort_direction(sort_dir)).addClass('active');
    });

    // add breadcrumbs element
    $('#advanced_search_button').click(function(){
        var breadcrumbs_title = $.trim($(this).text());
        addBreadcrumbs(breadcrumbs_title, "#{modules_classifier_search_data_path(@town)}");
    });
  });

  function init_search_params(sort_col, sort_dir) {
    var data = {
      town_id: $('#_item').data('town-id'),
      sort_col: sort_col,
      sort_dir: sort_dir
    }
    data[$('[name="[role]"]:checked').val() + '_edrpous'] = $('#_item').val();
    return data;
  }

  function graph_click(param) {
    var data = init_search_params();
    data[$('[name="[role]"]').not(':checked').val() + '_edrpous'] = param;
    classifier_search("#{modules_classifier_search_e_data_path}", data);
  }
