:scss
  //init colors
  $dark-blue: #0c2231;
  $white: #ffffff;
  $no-color: transparent;
  .row {
    .town-select {
      .select2-container {
        border-color: $no-color;
        .select2-choices {
          border-color: $dark-blue;
          &:before {
            content: '\f067';
            font-family: FontAwesome;
            position: absolute;
            right: 0;
            cursor: pointer;
            font-size: 20px;
            color: #ACA99F;
            width: 32px;
            height: 32px;
            background: $dark-blue;
            color: $white;
            padding: 3px 0 2px 9px;
          }
        }
      }
    }
  }
  .pull-left {
    margin: 0 20px 0 0px;
  }

:javascript
  var aCompareTaxonomies = {
    selected_amountype: 'plan',
    selected_level: '',
    selected_year: "#{@current_year}",
    selected_taxonomies: [],
    taxonomies: {},
    taxonomies_cache: {}
  }

%h1
  = t('.title')

.row
  .col-xs-5.town-select
    = render :partial => 'select_taxonomy', :locals => { taxonomies: @taxonomies }

%hr

.row
  .col-xs-12
    .pull-left
      = render :partial => 'select_amountype'
    .pull-left
      = render :partial => 'select_level'
    .pull-left
      = render :partial => 'select_divider', :locals => { amounts: @amounts }
    .pull-right
      = render :partial => 'select_year', :locals => { years: @years }

%hr

.row
  = render :partial => 'path'

.row
  = render :partial => 'chart'


:javascript

  aCompareTaxonomies.create_chart = function (){
    var store = this.taxonomies_cache
    var selected_level = this.selected_level

    aCompareTaxonomiesChart.clear_chart()

    aCompareTaxonomiesPath.draw_path()

    // load data to be compared
    this.selected_taxonomies.forEach(function(taxonomy, i) {
      if (store[taxonomy]) return true;

      var url = '/widgets/visify/get_bubbletree_data/' + taxonomy + '/' + selected_level;
      $.ajax({
        url: url,
        async: false
      }).done(function(data) {
         store[taxonomy] = data
      })
    });

    var data = this.get_data()
    aCompareTaxonomiesChart.draw_chart(data)
  }


  aCompareTaxonomies.select_taxonomies = function (ids, added){
    if (added) aCompareTaxonomies.taxonomies[added.id] = added.text
    this.selected_taxonomies = ids
    this.create_chart()
  }

  aCompareTaxonomies.select_amountype = function (amountype){
    this.selected_amountype = amountype
    this.create_chart()
  }

  aCompareTaxonomies.select_year = function (year){
    this.selected_year = year
    this.create_chart()
  }

  aCompareTaxonomies.select_level = function (level){
    this.selected_level = level
    aCompareTaxonomies.taxonomies_cache = {}

    aCompareTaxonomiesPath.path = []

    this.create_chart()
  }

  aCompareTaxonomies.get_data = function (){
    var store = this.taxonomies_cache
    var taxonomies = this.taxonomies
    var selected_taxonomies = this.selected_taxonomies
    var selected_amountype = this.selected_amountype
    var selected_year = this.selected_year
    var path = this.path

    var items = {}
    var amounts = {}

    aCompareTaxonomiesPath.last_level = false

    selected_taxonomies.forEach(function(taxonomy_id) {
      amounts[taxonomy_id] = {}

      var taxonomy = store[taxonomy_id]
      // move to selected level in tree
      aCompareTaxonomiesPath.path.forEach(function(path) {
        var new_taxonomy;
        if (taxonomy && taxonomy.children)
          taxonomy.children.forEach(function(child) {
            if (child.key == path.key && child.children)
              new_taxonomy = child
              return true;
          })

        taxonomy = new_taxonomy
      })

      // get level info
      if (taxonomy && taxonomy.children)
        taxonomy.children.forEach(function(node) {
          if (items[node.key] == null) items[node.key] = node.label

          if (node.amount[selected_amountype] && node.amount[selected_amountype][selected_year])
            amounts[taxonomy_id][node.key] = node.amount[selected_amountype][selected_year]['0'].total.toFixed(2)

          aCompareTaxonomiesPath.last_level = aCompareTaxonomiesPath.last_level || node.children == undefined
        })
    })

    var labels = []
    for (key in items) {
      labels.push({ key: key, label: items[key] })
    }

    var series = []
    selected_taxonomies.forEach(function(taxonomy_id) {
      var values = []
      for (key in items) {
        values.push(amounts[taxonomy_id][key] || 0)
      }

      series.push({label: taxonomies[taxonomy_id], values: values })
    })

    return {
      labels: labels,
      series: series
    };
  }


:javascript

  $(document).ready(function() {
    $('.amountype_select').on('click', function () {
      aCompareTaxonomies.select_amountype($(this).attr('data-amountype'))
    })


    $('.year_select').on('click', function () {
      aCompareTaxonomies.select_year($(this).attr('data-year'))
    })


    $('.level_select').on("click", function(){
      var level = $(this).attr('value');
      aCompareTaxonomies.select_level(level.split(' '));
    });

    $("#taxonomy_select").select2().on("change", function(data){
      aCompareTaxonomies.select_taxonomies(data.val, data.added)
    });
  });
