:scss
  //init colors
  $dark-blue: #0c2231;
  $white: #ffffff;
  $no-color: transparent;
  $gray: #999;

  .row {
    .town-select {
      padding-right: 0;
      padding-bottom: 10px;
      .select2-container {
        border-color: $no-color;
        .select2-choices {
          border-color: $dark-blue;
          padding-right: 32px;
          margin-right: -2px;
          &:before {
            content: '\f067';
            font-family: FontAwesome;
            position: absolute;
            right: 0;
            cursor: pointer;
            font-size: 20px;
            color: #ACA99F;
            width: 32px;
            height: 32px;
            background: $dark-blue;
            color: $white;
            padding: 3px 0 2px 9px;
          }
          .select2-search-choice {
            padding: 6px 18px 6px 3px;
            margin: 3px 0 3px 3px;
            .select2-search-choice-close {
              right: 3px;
              left: inherit;
            }
          }
        }
      }
    }
    .filters {
      padding: 0;
      .select-year,
      .select-level,
      .select-amount {
        padding: 0 0 10px 15px;
        //display: inline-block;
        .select2-container {
          width: 100%;
          .select2-choice {
            height: 34px;
            border-radius: 0;
            border-color: $dark-blue;
            background-color: $no-color;
            background-image: none;
            abbr{
              right: 32px;
            }
            .select2-chosen {
              text-align: right;
              margin: 3px 46px 3px auto;
              font-size: 16px;
              color: $gray;
              text-transform: lowercase;
              float: right;
            }
            .select2-arrow{
              border-left: 0;
              border-radius: 0;
              background: $dark-blue;
              width: 32px;
              &:before {
                content: '\f04b';
                transform: rotate(90deg);
                font-family: FontAwesome;
                position: absolute;
                right: 0;
                cursor: pointer;
                font-size: 20px;
                width: 32px;
                height: 32px;
                background: $dark-blue;
                color: $white;
                padding: 3px 0 2px 9px;
              }
            }
            &:hover,
            &:focus {
              outline-color: inherit;
            }
          }
        }
      }
    }
  }
  .select2-drop-multi {
    border-color: $dark-blue;
    margin-left: 1px;
    .select2-results {
      padding: 0;
      margin: 4px 0;
    }
  }
  .select2-drop-active {
    border: 1px solid #0c2231;
    border-top: 0;
    border-radius: 0;
    //.select2-search{
    //  display: none;
    //}
  }

  //Media
  @media (min-width: 992px) and (max-width: 1023px) {
    .row {
      .filters {
        .select-year,
        .select-level,
        .select-amount {
          .select2-container {
            .select2-choice {
              .select2-chosen {
                font-size: 13px;
                margin-right: 38px;
              }
            }
          }
        }
      }
    }
  }
  @media (min-width: 768px) and (max-width: 991px) {
    .row {
      .town-select {
        .select2-container {
          .select2-choices {
            .select2-search-choice {
              font-size: 11px;
            }
          }
        }
      }
      .filters {
        .select-year,
        .select-level,
        .select-amount {
          .select2-container {
            .select2-choice {
              .select2-chosen {
                font-size: 11px;
                margin-right: 35px;
              }
            }
          }
        }
      }
    }
  }
  @media (max-width: 400px) {
    .row {
      .town-select {
        .select2-container {
          .select2-choices {
            .select2-search-choice {
              font-size: 11px;
            }
          }
        }
      }
      .filters {
        .select-year,
        .select-level,
        .select-amount {
          .select2-container {
            .select2-choice {
              .select2-chosen {
                font-size: 11px;
                margin-right: 35px;
              }
            }
          }
        }
      }
    }
  }

:javascript
  var aCompareTaxonomies = {
    selected_amountype: 'plan',
    selected_level: '',
    selected_year: "#{@current_year}",
    selected_taxonomies: [],
    color: [
    {fact: '#0d3c55', plan: '#0f5b78'},
    {fact: '#a2b86c', plan: '#b6d370'},
    {fact: '#dc8aa8', plan: '#d9aebe'}
    ],
    towns_blazon:[],
    taxonomies: {},
    taxonomies_cache: {}
  }

%h1
  = t('.title')
-#test
.row
  .col-sm-5.town-select
    = render :partial => 'select_taxonomy', :locals => { taxonomies: @towns_with_tax_rov}
  .col-sm-7.filters
    = render :partial => 'select_year', :locals => { years: @years }
    -#= render :partial => 'select_amountype'
    = render :partial => 'select_level'
    = render :partial => 'select_divider', :locals => { amounts: @amounts }

.row
  = render :partial => 'path'

.row
  = render :partial => 'chart'


:javascript

  aCompareTaxonomies.create_chart = function (){
    var store = this.taxonomies_cache
    var selected_level = this.selected_level

    aCompareTaxonomiesChart.clear_chart()

    aCompareTaxonomiesPath.draw_path()

    // load data to be compared
    this.selected_taxonomies.forEach(function(taxonomy, i) {
      if (store[taxonomy]) return true;

      var url = '/widgets/visify/get_bubbletree_data/' + taxonomy + '/' + selected_level;
      $.ajax({
        url: url,
        async: false
      }).done(function(data) {
         store[taxonomy] = data
      })
    });

    var data = this.get_data()
    aCompareTaxonomiesChart.draw_chart(data)
  }


  aCompareTaxonomies.select_taxonomies = function (ids, added,townBlazon){
    if (added) aCompareTaxonomies.taxonomies[added.id] = {
        text: added.text,
        img: townBlazon
        }
    this.selected_taxonomies = ids
    this.create_chart()
  }


  aCompareTaxonomies.select_amountype = function (amountype){
    this.selected_amountype = amountype
    this.create_chart()
  }

  aCompareTaxonomies.select_year = function (year){
    this.selected_year = year
    this.create_chart()
  }

  aCompareTaxonomies.select_level = function (level){
    this.selected_level = level
    aCompareTaxonomies.taxonomies_cache = {}

    aCompareTaxonomiesPath.path = []

    this.create_chart()
  }

  aCompareTaxonomies.get_data = function (){
    var store = this.taxonomies_cache
    var taxonomies = this.taxonomies
    var selected_taxonomies = this.selected_taxonomies
    var selected_amountype = this.selected_amountype
    var selected_year = this.selected_year
    var path = this.path

    var items = {}
    var amounts = {}

    function getAmountData(amount){
      result = {
        plan: '0',
        fact: '0'
      }
      if(amount['plan'] && amount['plan'][selected_year]){
        result.plan = amount['plan'][selected_year]['0'].total.toFixed(2)
      }
      if(amount['fact'] && amount['fact'][selected_year]){
        result.fact = amount['fact'][selected_year]['0'].total.toFixed(2)
      }

      return result;
    }


    aCompareTaxonomiesPath.last_level = false

    selected_taxonomies.forEach(function(taxonomy_id) {
      amounts[taxonomy_id] = {}

      var taxonomy = store[taxonomy_id]
      // move to selected level in tree
      aCompareTaxonomiesPath.path.forEach(function(path) {
        var new_taxonomy;
        if (taxonomy && taxonomy.children)
          taxonomy.children.forEach(function(child) {
            if (child.key == path.key && child.children)
              new_taxonomy = child
              return true;
          })

        taxonomy = new_taxonomy
      })

      // get level info
      if (taxonomy && taxonomy.children)
        taxonomy.children.forEach(function(node) {
          if (items[node.key] == null) items[node.key] = {title: node.label, type: node.taxonomy}
          // items[node.key]['type'] = node.taxonomy
          amounts[taxonomy_id][node.key] = getAmountData(node.amount);

          // if (node.amount[selected_amountype] && node.amount[selected_amountype][selected_year])
          //   amounts[taxonomy_id][node.key] = node.amount[selected_amountype][selected_year]['0'].total.toFixed(2)

          aCompareTaxonomiesPath.last_level = aCompareTaxonomiesPath.last_level || node.children == undefined;
        })
    })

    var labels = []
    for (key in items) {
      labels.push({ key: key, label: items[key] })
    }

    var series = []
    selected_taxonomies.forEach(function(taxonomy_id) {
      var values = []
      for (key in items) {
        values.push(amounts[taxonomy_id][key] || 0)
      }

      series.push({label: taxonomies[taxonomy_id], values: values })
    })

    return {
      labels: labels,
      series: series
    };
  }


:javascript

  $(document).ready(function() {
    // $('.amountype_select').on('click', function () {
    //   aCompareTaxonomies.select_amountype($(this).attr('data-amountype'))
    // })

    $("#year_select").select2(
      {
        placeholder: "#{t('compare_taxonomies.index.select-year-placeholder')}" + " |"
      }
    ).on("change", function(data){
      aCompareTaxonomies.select_year(data.val, data.added)
    });

    //$('.level_select').on("click", function(){
    //  var level = $(this).attr('value');
    //
    //  aCompareTaxonomies.select_level(level.split(' '));
    //});

    $("#select-level").select2(
      {
        placeholder: "#{t('compare_taxonomies.index.select-levels-placeholder')}" + " |"
      }
    ).on("change", function(){
      var level = $(this).val();
      aCompareTaxonomies.select_level(level.split(' '));
    });

    // radio buttons to switch level
    $('#amount_select').select2(
      {
        placeholder: "#{t('compare_taxonomies.index.select-divider-placeholder')}" + " |"
      }
    ).on("change", function(){
      selected = $(this).find(":selected")
      aTreeChart.divider.amount = selected.attr('amount') || 1
      aTreeChart.divider.amount_pre = selected.attr('amount_pre')
      aTreeChart.divider.recalc_per = (selected.attr('recalc_per') == 'true')
      aTreeChart.refresh()
    });

  });
