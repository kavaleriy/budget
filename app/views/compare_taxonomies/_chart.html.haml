:scss
  svg.legend {
    .item {
      fill: black;
      font-size: 12px;
      text-anchor: start;
    }
  }

  .chart {
    g{
      text{
        fill: white;
        font-size: 14px;
      }
      .plan {
        text-anchor: end;
      }
      .fact{
        text-anchor: start;
      }
      .fact,.plan{
        opacity: 0;
        transition: opacity 0.3s linear;
      }
      &:hover,&:focus{
        .fact,.plan{
          opacity: 1;
          transition: opacity 0.3s linear;
        }
      }
    }


    .label {
      fill: black;
      font-size: 18px;
      text-anchor: start;
    }
    .label[data-selectable=selectable] {
      fill: darkslateblue;
      cursor: pointer;

      &:hover {
        fill: #87cefa;
      }

    }
  }

%svg.col-xs-7.chart
  
%svg.col-xs-5.legend

:javascript

  aCompareTaxonomiesChart = {
    chart: d3.select(".chart").attr("height", 0),
    legend: d3.select(".legend").attr("height", 0)
  }

  aCompareTaxonomiesChart.clear_chart = function (){
    this.chart.attr("height", 0).selectAll("g").remove()
    this.legend.attr("height", 0).selectAll("g").remove()
  }

  aCompareTaxonomiesChart.draw_chart = function (data){
    this.clear_chart()

    var chart = this.chart

    var doc_width = $('.chart').width();

    var chartWidth            = doc_width * .6,
        barHeight             = 30,
        groupHeight           = barHeight * data.series.length,
        gapBetweenGroups      = 60,
        spaceForLabels        = 0,
        spaceForLegend        = doc_width - chartWidth,
        blazon_width          = 35,
        blazon_heigth         = 35,
        icon_width            = 64,
        icon_heigth           = 64,
        // value: 22.5px
        blazon_circle_radius  = (blazon_heigth / 2) + 5,
        // value: 11.25px
        chart_start_x         = blazon_circle_radius / 2;

    // Zip the series data together (first values, second values, etc.)
    var zippedData = [];
    for (var i=0; i<data.labels.length; i++) {
      for (var j=0; j<data.series.length; j++) {
        zippedData.push(data.series[j].values[i]);
      }
    }

    // Color scale
    //var color = d3.scale.category10();
    var chartHeight = 50 + ((blazon_circle_radius*2) +10) * zippedData.length + gapBetweenGroups * data.labels.length;


    // Find max & min data value from zippedData
    // @incomes   data, as: zippedData, type: Array of Objects
    //                  example: [ { fact: "4578", plan: "20210" } ]
    //            valueType, type: String
    //                  values: min, max, default
    //                  example: 'min'
    // @returns   res, type: Integer
    //                  if one from values of zippedData equal zero or
    //                  use valueType - default, return zero
    var getValuesFromData = function(data, valueType) {
      // init result, default zero
      var res = 0;
      // check for type
      switch (valueType) {
        // if type = 'min'
        case 'min':
          // calculates the minimum value of an array
          // WARN! data must be ARRAY
          res = d3.min(data, function(d){
            // get fact & plan value from data
            // convert from String to Integer
            // return minimum value
            return parseInt(d.fact) < parseInt(d.plan) ? parseInt(d.fact) : parseInt(d.plan)
          });
          return res;


        case 'max':
          // calculates the maximum value of an array
          // WARN! data must be ARRAY
          res = d3.max(zippedData, function(d){
            // get fact & plan value from data
            // convert from String to Integer
            // return maximum value
            return parseInt(d.fact) > parseInt(d.plan) ? parseInt(d.fact) : parseInt(d.plan)
          });
          return res;

        default:
          throw 0;
      }
    }
    // correct display bar's length
    // WARN! Length work correctly
    // TODO: Check D3 scale, for build bar's
    var x = d3.scale.sqrt().exponent(.5)
      .domain([ getValuesFromData(zippedData, 'min'), getValuesFromData(zippedData, 'max') ])
      .range([ 145, doc_width ])
      // .range([ 1, chartWidth ])

    var y = d3.scale.linear()
        .range([chartHeight + gapBetweenGroups, 0]);

    chart.attr("width", spaceForLabels + chartWidth + spaceForLegend)
      .attr("height", chartHeight)

    // Create bars
    var bar = chart.selectAll("g")
        .data(zippedData)
        .enter()
        .append("g")
        .attr("transform", function(d, i) {
          var y_translate = (50 + i * ((blazon_circle_radius*2) +10) + gapBetweenGroups * (0.5 + Math.floor(i/data.series.length)));
          return "translate(" + 0 + "," + y_translate + ")";
        });

    bar = chart.selectAll("g")
      .data(zippedData)

    //////////////////////////////////////////////////////////////////////////////////////
    // Draw plan & fact rectangles
    // Create plan rectangles of the correct width

    // Create rect for plan
    bar.append("rect")
        .attr('x', barHeight)
        .attr('data-type','plan')
        .attr("fill", function(d,i) { return aCompareTaxonomies.color[(i % data.series.length)].plan })
        .attr("class", "bar")
        .attr("width", function(d){
        return x(d.plan) - blazon_circle_radius || '0' } )
        .attr("height", function(d) { return d == 0 ? 0 : barHeight - 1; });

    // Create rect for fact
    bar.append("rect")
        .attr('x', barHeight)
        .attr('data-type','fact')
        .attr("fill", function(d,i) { return aCompareTaxonomies.color[(i % data.series.length)].fact })
        .attr("class", "bar")
        .attr("width", function(d) {
          var fact_x = d3.scale.linear()
          .domain([1, d.plan])
          .range([1, x(d.plan)]);
          return fact_x(d.fact) - blazon_circle_radius || '0' })
        .attr("height", function(d) { return d == 0 ? 0 : barHeight - 1; });
    //////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////
    // Draw town blazon
    // Create circle
    bar.append('circle')
      .style("stroke", "gray")
      .style("fill", "white")
      .attr("r", blazon_circle_radius)
      .attr("cx", chart_start_x)
      .attr("cy", function(d){ return ((blazon_heigth - blazon_circle_radius) + 2 )});

    // Add img to circle
    bar.append("svg:image")
      .attr("xlink:href",function(d,i){
        return data.series[(i % data.series.length)].label.img;
        })
      .attr("width", blazon_width)
      .attr("height", blazon_heigth)
      .attr("x", function(d){ return  -((blazon_width / 2) - chart_start_x) })
      .attr("y", function(d){ return (barHeight - blazon_heigth) / 2 });
    //////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////
    // Draw plan&fact text
    // Add plan text label into rect
    bar.append("text")
        .attr("class", "plan")
        .attr("x", function(d) { console.log(x(d.plan)); return x(d.plan)  || '0' })
        .attr("y", barHeight / 2)
        .attr("dy", ".35em")
        .text(function(d) { return d == 0 ? "" : aHelper.short_label(d.plan); });

    // Add fact text label into rect
    bar.append("text")
        .attr("class", "fact")
        .attr('x', chart_start_x + blazon_circle_radius + 2)
        .attr("y", barHeight / 2)
        .attr("dy", ".35em")
        .text(function(d) { return d == 0 ? "" : aHelper.short_label(d.fact); });
    //////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////
    // Draw labels path
    bar.append("text")
        .attr("class", "label")
        .attr("data-selectable", function(d) { return aCompareTaxonomiesPath.last_level ? "" : "selectable"; })
        .attr("x", icon_width)
        .attr("y", -20)
        .attr("dy", ".35em")
        .text(function(d,i) {
          var title = ''
          if (i % data.series.length === 0){
            title = data.labels[Math.floor(i/data.series.length)].label.title;
          }
          return title;
        })
        .on("click", function(d, i){
          item = data.labels[Math.floor(i/data.series.length)]

          if (aCompareTaxonomiesPath.last_level == false) {
            aCompareTaxonomiesPath.path.push(item)
            aCompareTaxonomies.create_chart()
          }
        })
    // TODO: Move it's function to js global helper (aHelper)
    var get_icon = function(type, key) {
      // path to icons folder
      path = '/assets/icons/';
      // default filename
      filename = 'no-image.svg'
      // default path to file
      fullPath = path + filename;

        // create path for type [ ktfk, kekv, kkd ]
        // path = PATHtofolder/foldername(TYPE)/filename.svg(KEY)
        (type == 'ktfk' || type == 'kekv' || type == 'kkd') ? fullPath = path + type + '/' + key + '.svg' : fullPath;

        // create path for type [ ktfk_aaa ]
        // cond 1: key consist 2 digits - filename = 0[KEY]000.svg
        // cond 2: key consist 3 digits - filename = [KEY]000.svg
        if (type == "ktfk_aaa") {

          (key.toString().length) == 2 ? filename = "0" + key + "000.svg" : ((key.toString().length) == 3 ? filename = key + "000.svg" : filename)

          fullPath = path + type.substring(0,4) + '/' + filename;
        }
      return fullPath;
    }
    // Add icon
    // bar.append("image")
    //   .attr("xlink:href", function(d,i){ return d == 0 ? "" : get_icon(data.labels[i].label.type, data.labels[i].key) })
    //   .attr("width", icon_width)
    //   .attr("height", icon_heigth)
    //   .attr("x", function(d){ return  -((icon_width / 2) - 21) })
    //   .attr("y", function(d){ return -(icon_heigth + 11) });
    //////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////
    // Draw legend
    var legend = this.legend
    legend.attr("height", chartHeight)

    var legendYPos  = 90;

    var legend_x_scale = d3.scale.linear()
                                    .domain([0,2])
                                    .range([0,spaceForLegend]);
    // TODO add locales when we move this code to js file
    var legend_title_arr = ['План','Факт','Виконання']
    var legend_title = legend.selectAll('legend_title_g')
        .data(legend_title_arr)
        .enter()
        .append('g')

    legend_title.append('text')
        .attr('class','chart_sort')
        .attr('font-family','FontAwesome')
        .attr('font-size','16')
        .attr('x', function(d,i){ return legend_x_scale(i) })
        .attr('y', '20')
        .attr('data-value',function(d){ return d; })
        // .append('tspan').text(function(d){ return d; });
        .text(function(d){ return d;})


    var items = legend.selectAll('legend_indexes')
        .data(zippedData)
        .enter()
        .append('g')
        .attr('transform', function (d, i) {
            var vert = (i * ((blazon_circle_radius*2) +10) + gapBetweenGroups * (0.5 + Math.floor(i/data.series.length)) + (- 20));

            return "translate(" + 0 + "," + vert + ")";
        });

    var colors=d3.scale.linear()
        .domain([0,100]);

    colors.range(["green","yellow","red"].reverse());


    items.append('text')
        .attr('class', 'plan')
        .attr('x', function(d,i){ return legend_x_scale(0) })
        .attr('y', legendYPos)
        .text(function (d,i) {
          return d == 0 ? "" : aHelper.short_label(d.plan);
        });
    items.append('text')
        .attr('class', 'fact')
        .attr('x', function(d,i){ return legend_x_scale(1) })
        .attr('y', legendYPos)
        .text(function (d,i) {
          return d == 0 ? "" : aHelper.short_label(d.fact);
        });
    items.append('rect')
        .attr('class','percent_rect')
        .attr('x', function(d,i){ return legend_x_scale(2) - 3 })
        .attr('y', legendYPos - 16 )
        //set color
        .attr("fill", function(d,i) { return colors(Math.round(d.fact * 100 / d.plan)) })
        .attr('opacity', '.7')
        // set border-radius
        .attr('rx',2)
        .attr('ry',2)
        .attr('width','36')
        // .attr("width", function(d) { return  (12 * Math.round(d.fact * 100 / d.plan).toString().length) + 12 ; })
        .attr("height", '22');

    items.append('text')
        .attr('class', 'fact')
        .attr('x', function(d,i){ return legend_x_scale(2) })
        .attr('y', legendYPos)
        .attr('textLength','30')
        .text(function (d,i) {
          var res = Math.round(d.fact * 100 / d.plan);
          if(!isFinite(res)){
            res = 0;
          }
          return res + '%';
        });
  };
  $(document).ready(function(){
    $('.chart_sort').click(function(){
    });

  });