- model_class = Repairing::Layer

:css
  .map_container {
    height: 750px;
  }

= content_for :header do
  .head
    %i.fa.fa-map
    = @repairing_layer.town.title if @repairing_layer.town
    = ", " + @repairing_layer.title unless @repairing_layer.title.blank?

.col-xs-12
  = render 'edit_form'

.col-xs-12.col-md-8
  .panel.panel-default
    .panel-heading
      = render partial: 'search_repairs_coordinates', locals: { layer: @repairing_layer }
    .panel-body
      .map_container.col-xs-12
        = render partial: 'repairing/maps/map'

.col-xs-12.col-md-4
  .panel.panel-default
    .panel-heading
      = t('repairing.layers.edit.repair')
    .panel-body
      #repair
      #remove_repair

.clear

%button#calc_roads.btn.btn-info{ disabled: 'disabled' }
  = t('.calculate_coordinates')

= link_to t('form.show'), @repairing_layer, class: 'btn btn-primary'

= link_to t('form.back'), repairing_layers_path, class: 'btn btn-default'

= link_to t('repairing.repairs.all_repairs'),
          edit_repairing_layer_path(layer_id: @layer.id),
          class: 'btn btn-success',
          remote: true,
          method: 'get'

#repairs
  - if @repairs
    = render partial: 'repairs'

:javascript

  $(document).ready(function() {

    var aRepairMap = RepairMap({
      zoom: 6,
      minZoom: 5,
      maxZoom: 18,
      center: [48.5, 31.2],
      bounds: [ [47.54677, 21.44531], [52.32182, 41.52832]],
      getMapPopupContent: getMapPopupContent,
      scrollWheelZoom: true
    });
    var categories_icons = #{Repairing::Category.get_category_icons}

    // add markers
    $.ajax({
      method: 'get',
      url: '#{geo_json_repairing_layer_path}',
      dataType: 'json',
    })
    .done(function (data) {

      aRepairMap.addGeoJsonPoints(data, getPoint, {
        clustered: true,
        style: {
          opacity: 0.5,
        },
        hoverStyle: {
          opacity: 1,
        },
        featureClickCallback: onFeatureClick,
        dragCallback: onDrag,
        editInfoContent: true
      })

      initRoads(data)

      function initRoads(data) {
        var roads = get_roads_arr()

        if (roads.length > 0) {
          $('button#calc_roads')
            .removeAttr("disabled")
            .click(function() {
              reCalculateRoutes()
            })
        }

        function get_roads_arr() {
          var features = []

          get_roads(data['features'])

          function get_roads(item) {
            if (item == null) return;

            $.each(item, function(i, d){
              if (d.properties.repair == "road")
                features.push(d)

              get_roads(d['features'])
            })
          }

          return features;
        }

        function reCalculateRoutes() {
          if (roads.length == 0) return;

          calc_routes()

          function calc_routes() {
            var road = roads.pop()
            if (road == null) return;

            calc_road_route(road)

            function calc_road_route(road) {
              var coordinates = road.properties.route

              var waypoints = []
              waypoints.push({ latLng: L.latLng(coordinates[0]) });
              waypoints.push({ latLng: L.latLng(coordinates[coordinates.length - 1]) });

              L.Routing.control({
                waypoints: waypoints,
                routeWhileDragging: false
              }).on('routesfound', function(router) {
                updateRoute(router.routes[0].coordinates, road)
              });
            }

            calc_routes()
          }
        }
      }

    })
    .fail(function () {
    });


    var Icon = L.Icon.extend({ options: { iconSize: [28, 28] }});
    // REPEAT !!!!!!!!!!!!
    // Same code in repairing/maps/_iframe.html.haml
    function getIconByCategory(category_id){

      var iconCategoryUrl = '/assets/repairing/default_icon.png';
      if (categories_icons[category_id] ){
        iconCategoryUrl = categories_icons[category_id];
      };

      return new Icon({iconUrl: iconCategoryUrl});
    };

    function getPoint(properties) {
      var point = {}
      point.icon = getIconByCategory(properties.p_c_id);

      point.draggable = (properties.route == null)
      point.showPopup = (properties.route == null)
      return point;
    }

    function onMapClick(feature, popup) {
    }

    function getMapPopupContent(e) {
      var content = e.latlng.toString()
      return content
    }

    var _removedFeature
    var _selectedFeature

    function onFeatureClick(feature, layer) {
      selectFeature(feature, layer)

      featureId = feature.properties.id
      $.ajax({
        url: '/repairing/map/getInfoContentForPopup/' + featureId + "?locale=" + "#{params[:locale]}",
        success:function(data){
          layer.bindPopup(data).openPopup();
        }
      })

    }

    function onDrag(layer, ll) {
      $.ajax({
        method: 'PUT',
        url: '#{repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", layer.feature.properties.id),
        dataType: 'json',
        cache: false,
        data: {
          repairing_repair: {
            coordinates: [ll.lat, ll.lng]
          }
        }
      })
      .fail(function () {
        alert('Не вдалось зберегти дані')
      })
    }

    $('.search_map form').bind("ajax:success", function(f, data){
      if (data.features) {
        selectFeature(data.features[0]);
      } else {
        aRepairMap.addGeoJsonPoint([data['properties']['id'], 0, data], getPoint, {
          clustered: true,
          style: {
            opacity: 0.8,
          },
          hoverStyle: {
            opacity: 1,
          },
          featureClickCallback: onFeatureClick,
          dragCallback: onDrag,
          editInfoContent: true
        });
        selectFeature(data);
      }
    });

    function selectFeature(feature, target) {
      $('#repair').html('');

      //if (_removedFeature) {
        //url = '#{repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", _removedFeature.properties.id)
        //_removedFeature = undefined

        //$.ajax({
        //  method: 'GET',
        //  cache: false,
        //  url: url,
        //}).done(function (data) {
        //  aRepairMap.addGeoJsonPoint(data);
        //})
      //}

      _selectedFeature = feature

      if (_selectedFeature) {
        $.ajax({
          method: 'GET',
          cache: false,
          url: '#{edit_repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", _selectedFeature.properties.id),
          success: function(){
            $('#remove_repair').on('click',function(){
                aRepairMap.removeMarker(_selectedFeature);
            });
          }
        })
        .fail(function () {
          console.log('click fail')
        })

        if (_selectedFeature.properties.repair == "road") {
          //if (target) {
          //  _removedFeature = target.feature
          //  aRepairMap.map.removeLayer(target)
          //}

          editRoute()
        } else {
          aRepairMap.editRoute([])
        }
      }
    }

    function editRoute(feature) {

      if (feature == null)
        feature = _selectedFeature

      var coordinates  = feature.properties.route

      var waypoints = []
      // if we need all waypoints on the road
      $.each(coordinates,function(coordKey, coordVal){
        waypoints.push({ latLng: L.latLng(coordVal) });
      })
      // if we need only first and last point on the road
      // waypoints.push({ latLng: L.latLng(coordinates[0]) });
      // waypoints.push({ latLng: L.latLng(coordinates[coordinates.length - 1]) });

      aRepairMap.editRoute(waypoints, routeFoundCallback)

      function routeFoundCallback(route) {
        updateRoute(route, feature)
      }
    }

    function updateRoute(route, feature){
      update_feature_coords()
      store_route()

      function update_feature_coords() {
        feature.properties.route = []
        $.each(route, function(key,val) {

          feature.properties.route.push([val['lat'], val['lng']])
        })
      }

      function store_route() {
        var coordinates = ''
        $.each(route, function(key,val) {
          coordinates += val + ' '
        })
        $.ajax({
          method: 'PUT',
          url: '#{repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", feature.properties.id),
          dataType: 'json',
          data: {
            repairing_repair: {
              coordinates: coordinates
            }
          }
        })
        .fail(function () {
          alert('Не вдалось зберегти дані')
        })
      }
    }

  });


