:scss
  #reporting{
    margin-top: 10px;
    select{
      width: 65px;
    }
    #reporting-chart{
      margin-bottom: 10px;
      #desc{
        font-size: 16px;
        font-weight: bold;
      }
    }
  }


%ul.nav.nav-tabs{role: 'tablist'}
  %li.active
    %a{role: 'tab', 'data-toggle' => 'tab', href: '#reporting'}
      Фінансові показники
  %li
    %a{role: 'tab', 'data-toggle' => 'tab', href: '#analysis'}
      Фінансовий аналіз

.tab-content
  #reporting.tab-pane.fade.in.active
    %h4
      %span Код показника
      = select_tag :form_1, options_for_select(@codes_form_1.collect{ |c| ["#{c.code} #{c.title}", c.code] }), prompt: "B"
      = select_tag :form_2, options_for_select(@codes_form_2.collect{ |c| ["#{c.code} #{c.title}", c.code] }), prompt: "F"

    = render partial: 'reporting_chart'

    .row
      .col-xs-12
        .files
          - @enterprise.other_files.each do |file|
            = link_to file.file.url, title: 'Завантажити' do
              %i.fa.fa-download.fa.fa-border
              = file.file_identifier

  #analysis.tab-pane.fade
    %h4
      %span Похідні показники
    = render partial: 'analysis_chart'


:javascript
  $(document).ready(function(){
    var data1;
    var code = 1000;
    get_chart(code)

    $('#form_1, #form_2').on('change', function(){
      code = $(this).val();
      get_chart(code)
    });

   function get_chart(code){
    $.ajax({
      url: "#{municipal_reporting_chart_path}",
      type: "GET",
      dataType: 'json',
      data: {
        enterprise_id: $('#_enterprises').val(),
        code: code
      },
      success: function(json) {
        data1 = json;
        create_chart();
      }
    })
   }

    function create_chart(){
      var years = [];
      var values = [];
      var data_years = data1[code]['years'];

      $.each(data_years, function(key, value){
        years.push(key);
        values.push(value);
      });

      // If call this function with selected code
      // Because chart buggy with old selected codes
      if (typeof code === 'string' ){
        // find container old chart
        var lineChart = $("#code-chart").parent();
        // drop old chart canvas
        $("#code-chart").remove();
        // add new canvas
        lineChart.append('<canvas id="code-chart">');
        // drop iframe, drop old charts
        $('.chartjs-hidden-iframe').remove();
      }

      //desc for this graph
      $("#desc").text(data1[code]['desc']);

      build_chart(years, values)
    }

    function build_chart(years, values){
      var ctx = document.getElementById("code-chart").getContext('2d');
      var gradient = ctx.createLinearGradient(0, 0, 0, 300);
      var myChart;
      gradient.addColorStop(0, 'green');
      gradient.addColorStop(0.8, 'yellow');
      gradient.addColorStop(1, 'orange');

      myChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: years,
          datasets: [{
            data: values,
            backgroundColor: gradient,
            hoverBackgroundColor: gradient,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          scaleStartValue : 0,
          legend: {
            display: false
          },
          scales: {
            xAxes: [{
              stacked: true
            }],
            yAxes: [{
              stacked: true
            }]
          }
        }
      })
    }

  })


:javascript
  $(document).ready(function(){
    var data1;
    var codes;

    $.ajax({
      url: "#{municipal_analysis_chart_codes_path}",
      type: "GET",
      dataType: 'json',
      data: {
        enterprise_id: $('#_enterprises').val()
      },
      success: function(json) {
        codes = json;
        get_chart(codes)
      }
    })

    function get_chart(codes){
      $.ajax({
        url: "#{municipal_analysis_chart_path}",
        type: "GET",
        dataType: 'json',
        data: {
          enterprise_id: $('#_enterprises').val(),
          codes: codes
        },
        success: function(json) {
          data1 = json;
          create_chart();
        }
      })
    }

    function dynamicColors() {
      var r = Math.floor(Math.random() * 255);
      var g = Math.floor(Math.random() * 255);
      var b = Math.floor(Math.random() * 255);
      return "rgba(" + r + "," + g + "," + b + ",0.4)";
    }

    function create_chart(){
      // console.log(data1);
      var data_chart = [];
      var years = [];

      $.each(data1, function(key, value) {
        data_chart[key] = {}
        data_chart[key]['label'] =  value[codes[key]]['abbr'];
        data_chart[key]['spanGaps'] =  true;
        data_chart[key]['data'] = [];
        data_chart[key]['backgroundColor'] = dynamicColors();

        $.each(value[codes[key]]['years'], function(k, v){
          years.push(k);
          data_chart[key]['data'].push(v);
        });
      })

      var data_years = Array.from(new Set(years));

      // If call this function with selected code
      // Because chart buggy with old selected codes
      // if (typeof code === 'string' ){
      //   // find container old chart
      //   var lineChart = $("#code-an-chart").parent();
      //   // drop old chart canvas
      //   $("#code-an-chart").remove();
      //   // add new canvas
      //   lineChart.append('<canvas id="code-an-chart">');
      //   // drop iframe, drop old charts
      //   $('.chartjs-hidden-iframe').remove();
      // }

      // var years = [];
      // var data_years = data1[0][code[0]]['years'];
      //
      // $.each(data_years, function(key, value){
      //   years.push(key);
      // });

      //desc for this graph
      // $("#desc").text(value['desc']);

      build_chart(data_years, data_chart)
    }

    function build_chart(years, data){
      var ctx = document.getElementById("code-an-chart").getContext('2d');
      // var gradient = ctx.createLinearGradient(0, 0, 0, 300);
      var myChart;
      // gradient.addColorStop(0, 'green');
      // gradient.addColorStop(0.8, 'yellow');
      // gradient.addColorStop(1, 'orange');

      myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: years,
          datasets: data
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          scaleStartValue : 0,
          scales: {
            xAxes: [{
              stacked: true
            }],
            yAxes: [{
              stacked: true
            }]
          }
        }
      })
    }

  })